// --------------- DO NOT EDIT --------------
// -- This file is automatically generated --
//
// Date: 5. 8. 2022 12:16:27
// Enums: 53
// Structs: 106
// Functions: 157

using System;
using System.Interop;

namespace Wgpu {
	public static class Wgpu {
		public enum AdapterType : c_uint {
			DiscreteGPU = 0,
			IntegratedGPU = 1,
			CPU = 2,
			Unknown = 3,
		}

		public enum AddressMode : c_uint {
			Repeat = 0,
			MirrorRepeat = 1,
			ClampToEdge = 2,
		}

		public enum BackendType : c_uint {
			Null = 0,
			WebGPU = 1,
			D3D11 = 2,
			D3D12 = 3,
			Metal = 4,
			Vulkan = 5,
			OpenGL = 6,
			OpenGLES = 7,
		}

		public enum BlendFactor : c_uint {
			Zero = 0,
			One = 1,
			Src = 2,
			OneMinusSrc = 3,
			SrcAlpha = 4,
			OneMinusSrcAlpha = 5,
			Dst = 6,
			OneMinusDst = 7,
			DstAlpha = 8,
			OneMinusDstAlpha = 9,
			SrcAlphaSaturated = 10,
			Constant = 11,
			OneMinusConstant = 12,
		}

		public enum BlendOperation : c_uint {
			Add = 0,
			Subtract = 1,
			ReverseSubtract = 2,
			Min = 3,
			Max = 4,
		}

		public enum BufferBindingType : c_uint {
			Undefined = 0,
			Uniform = 1,
			Storage = 2,
			ReadOnlyStorage = 3,
		}

		public enum BufferMapAsyncStatus : c_uint {
			Success = 0,
			Error = 1,
			Unknown = 2,
			DeviceLost = 3,
			DestroyedBeforeCallback = 4,
			UnmappedBeforeCallback = 5,
		}

		public enum CompareFunction : c_uint {
			Undefined = 0,
			Never = 1,
			Less = 2,
			LessEqual = 3,
			Greater = 4,
			GreaterEqual = 5,
			Equal = 6,
			NotEqual = 7,
			Always = 8,
		}

		public enum CompilationInfoRequestStatus : c_uint {
			Success = 0,
			Error = 1,
			DeviceLost = 2,
			Unknown = 3,
		}

		public enum CompilationMessageType : c_uint {
			Error = 0,
			Warning = 1,
			Info = 2,
		}

		public enum ComputePassTimestampLocation : c_uint {
			Beginning = 0,
			End = 1,
		}

		public enum CreatePipelineAsyncStatus : c_uint {
			Success = 0,
			Error = 1,
			DeviceLost = 2,
			DeviceDestroyed = 3,
			Unknown = 4,
		}

		public enum CullMode : c_uint {
			None = 0,
			Front = 1,
			Back = 2,
		}

		public enum DeviceLostReason : c_uint {
			Undefined = 0,
			Destroyed = 1,
		}

		public enum ErrorFilter : c_uint {
			Validation = 0,
			OutOfMemory = 1,
		}

		public enum ErrorType : c_uint {
			NoError = 0,
			Validation = 1,
			OutOfMemory = 2,
			Unknown = 3,
			DeviceLost = 4,
		}

		public enum FeatureName : c_uint {
			Undefined = 0,
			DepthClipControl = 1,
			Depth24UnormStencil8 = 2,
			Depth32FloatStencil8 = 3,
			TimestampQuery = 4,
			PipelineStatisticsQuery = 5,
			TextureCompressionBC = 6,
			TextureCompressionETC2 = 7,
			TextureCompressionASTC = 8,
			IndirectFirstInstance = 9,
		}

		public enum FilterMode : c_uint {
			Nearest = 0,
			Linear = 1,
		}

		public enum FrontFace : c_uint {
			CCW = 0,
			CW = 1,
		}

		public enum IndexFormat : c_uint {
			Undefined = 0,
			Uint16 = 1,
			Uint32 = 2,
		}

		public enum LoadOp : c_uint {
			Undefined = 0,
			Clear = 1,
			Load = 2,
		}

		public enum MipmapFilterMode : c_uint {
			Nearest = 0,
			Linear = 1,
		}

		public enum PipelineStatisticName : c_uint {
			VertexShaderInvocations = 0,
			ClipperInvocations = 1,
			ClipperPrimitivesOut = 2,
			FragmentShaderInvocations = 3,
			ComputeShaderInvocations = 4,
		}

		public enum PowerPreference : c_uint {
			Undefined = 0,
			LowPower = 1,
			HighPerformance = 2,
		}

		public enum PredefinedColorSpace : c_uint {
			Undefined = 0,
			Srgb = 1,
		}

		public enum PresentMode : c_uint {
			Immediate = 0,
			Mailbox = 1,
			Fifo = 2,
		}

		public enum PrimitiveTopology : c_uint {
			PointList = 0,
			LineList = 1,
			LineStrip = 2,
			TriangleList = 3,
			TriangleStrip = 4,
		}

		public enum QueryType : c_uint {
			Occlusion = 0,
			PipelineStatistics = 1,
			Timestamp = 2,
		}

		public enum QueueWorkDoneStatus : c_uint {
			Success = 0,
			Error = 1,
			Unknown = 2,
			DeviceLost = 3,
		}

		public enum RenderPassTimestampLocation : c_uint {
			Beginning = 0,
			End = 1,
		}

		public enum RequestAdapterStatus : c_uint {
			Success = 0,
			Unavailable = 1,
			Error = 2,
			Unknown = 3,
		}

		public enum RequestDeviceStatus : c_uint {
			Success = 0,
			Error = 1,
			Unknown = 2,
		}

		public enum SType : c_uint {
			Invalid = 0,
			SurfaceDescriptorFromMetalLayer = 1,
			SurfaceDescriptorFromWindowsHWND = 2,
			SurfaceDescriptorFromXlibWindow = 3,
			SurfaceDescriptorFromCanvasHTMLSelector = 4,
			ShaderModuleSPIRVDescriptor = 5,
			ShaderModuleWGSLDescriptor = 6,
			PrimitiveDepthClipControl = 7,
			SurfaceDescriptorFromWaylandSurface = 8,
			SurfaceDescriptorFromAndroidNativeWindow = 9,
			SurfaceDescriptorFromXcbWindow = 10,
		}

		public enum SamplerBindingType : c_uint {
			Undefined = 0,
			Filtering = 1,
			NonFiltering = 2,
			Comparison = 3,
		}

		public enum StencilOperation : c_uint {
			Keep = 0,
			Zero = 1,
			Replace = 2,
			Invert = 3,
			IncrementClamp = 4,
			DecrementClamp = 5,
			IncrementWrap = 6,
			DecrementWrap = 7,
		}

		public enum StorageTextureAccess : c_uint {
			Undefined = 0,
			WriteOnly = 1,
		}

		public enum StoreOp : c_uint {
			Undefined = 0,
			Store = 1,
			Discard = 2,
		}

		public enum TextureAspect : c_uint {
			All = 0,
			StencilOnly = 1,
			DepthOnly = 2,
		}

		public enum TextureComponentType : c_uint {
			Float = 0,
			Sint = 1,
			Uint = 2,
			DepthComparison = 3,
		}

		public enum TextureDimension : c_uint {
			_1D = 0,
			_2D = 1,
			_3D = 2,
		}

		public enum TextureFormat : c_uint {
			Undefined = 0,
			R8Unorm = 1,
			R8Snorm = 2,
			R8Uint = 3,
			R8Sint = 4,
			R16Uint = 5,
			R16Sint = 6,
			R16Float = 7,
			RG8Unorm = 8,
			RG8Snorm = 9,
			RG8Uint = 10,
			RG8Sint = 11,
			R32Float = 12,
			R32Uint = 13,
			R32Sint = 14,
			RG16Uint = 15,
			RG16Sint = 16,
			RG16Float = 17,
			RGBA8Unorm = 18,
			RGBA8UnormSrgb = 19,
			RGBA8Snorm = 20,
			RGBA8Uint = 21,
			RGBA8Sint = 22,
			BGRA8Unorm = 23,
			BGRA8UnormSrgb = 24,
			RGB10A2Unorm = 25,
			RG11B10Ufloat = 26,
			RGB9E5Ufloat = 27,
			RG32Float = 28,
			RG32Uint = 29,
			RG32Sint = 30,
			RGBA16Uint = 31,
			RGBA16Sint = 32,
			RGBA16Float = 33,
			RGBA32Float = 34,
			RGBA32Uint = 35,
			RGBA32Sint = 36,
			Stencil8 = 37,
			Depth16Unorm = 38,
			Depth24Plus = 39,
			Depth24PlusStencil8 = 40,
			Depth24UnormStencil8 = 41,
			Depth32Float = 42,
			Depth32FloatStencil8 = 43,
			BC1RGBAUnorm = 44,
			BC1RGBAUnormSrgb = 45,
			BC2RGBAUnorm = 46,
			BC2RGBAUnormSrgb = 47,
			BC3RGBAUnorm = 48,
			BC3RGBAUnormSrgb = 49,
			BC4RUnorm = 50,
			BC4RSnorm = 51,
			BC5RGUnorm = 52,
			BC5RGSnorm = 53,
			BC6HRGBUfloat = 54,
			BC6HRGBFloat = 55,
			BC7RGBAUnorm = 56,
			BC7RGBAUnormSrgb = 57,
			ETC2RGB8Unorm = 58,
			ETC2RGB8UnormSrgb = 59,
			ETC2RGB8A1Unorm = 60,
			ETC2RGB8A1UnormSrgb = 61,
			ETC2RGBA8Unorm = 62,
			ETC2RGBA8UnormSrgb = 63,
			EACR11Unorm = 64,
			EACR11Snorm = 65,
			EACRG11Unorm = 66,
			EACRG11Snorm = 67,
			ASTC4x4Unorm = 68,
			ASTC4x4UnormSrgb = 69,
			ASTC5x4Unorm = 70,
			ASTC5x4UnormSrgb = 71,
			ASTC5x5Unorm = 72,
			ASTC5x5UnormSrgb = 73,
			ASTC6x5Unorm = 74,
			ASTC6x5UnormSrgb = 75,
			ASTC6x6Unorm = 76,
			ASTC6x6UnormSrgb = 77,
			ASTC8x5Unorm = 78,
			ASTC8x5UnormSrgb = 79,
			ASTC8x6Unorm = 80,
			ASTC8x6UnormSrgb = 81,
			ASTC8x8Unorm = 82,
			ASTC8x8UnormSrgb = 83,
			ASTC10x5Unorm = 84,
			ASTC10x5UnormSrgb = 85,
			ASTC10x6Unorm = 86,
			ASTC10x6UnormSrgb = 87,
			ASTC10x8Unorm = 88,
			ASTC10x8UnormSrgb = 89,
			ASTC10x10Unorm = 90,
			ASTC10x10UnormSrgb = 91,
			ASTC12x10Unorm = 92,
			ASTC12x10UnormSrgb = 93,
			ASTC12x12Unorm = 94,
			ASTC12x12UnormSrgb = 95,
		}

		public enum TextureSampleType : c_uint {
			Undefined = 0,
			Float = 1,
			UnfilterableFloat = 2,
			Depth = 3,
			Sint = 4,
			Uint = 5,
		}

		public enum TextureViewDimension : c_uint {
			Undefined = 0,
			_1D = 1,
			_2D = 2,
			_2DArray = 3,
			Cube = 4,
			CubeArray = 5,
			_3D = 6,
		}

		public enum VertexFormat : c_uint {
			Undefined = 0,
			Uint8x2 = 1,
			Uint8x4 = 2,
			Sint8x2 = 3,
			Sint8x4 = 4,
			Unorm8x2 = 5,
			Unorm8x4 = 6,
			Snorm8x2 = 7,
			Snorm8x4 = 8,
			Uint16x2 = 9,
			Uint16x4 = 10,
			Sint16x2 = 11,
			Sint16x4 = 12,
			Unorm16x2 = 13,
			Unorm16x4 = 14,
			Snorm16x2 = 15,
			Snorm16x4 = 16,
			Float16x2 = 17,
			Float16x4 = 18,
			Float32 = 19,
			Float32x2 = 20,
			Float32x3 = 21,
			Float32x4 = 22,
			Uint32 = 23,
			Uint32x2 = 24,
			Uint32x3 = 25,
			Uint32x4 = 26,
			Sint32 = 27,
			Sint32x2 = 28,
			Sint32x3 = 29,
			Sint32x4 = 30,
		}

		public enum VertexStepMode : c_uint {
			Vertex = 0,
			Instance = 1,
		}

		public enum BufferUsage : c_uint {
			None = 0,
			MapRead = 1,
			MapWrite = 2,
			CopySrc = 4,
			CopyDst = 8,
			Index = 16,
			Vertex = 32,
			Uniform = 64,
			Storage = 128,
			Indirect = 256,
			QueryResolve = 512,
		}

		public enum ColorWriteMask : c_uint {
			None = 0,
			Red = 1,
			Green = 2,
			Blue = 4,
			Alpha = 8,
			All = 15,
		}

		public enum MapMode : c_uint {
			None = 0,
			Read = 1,
			Write = 2,
		}

		public enum ShaderStage : c_uint {
			None = 0,
			Vertex = 1,
			Fragment = 2,
			Compute = 4,
		}

		public enum TextureUsage : c_uint {
			None = 0,
			CopySrc = 1,
			CopyDst = 2,
			TextureBinding = 4,
			StorageBinding = 8,
			RenderAttachment = 16,
		}

		public enum NativeSType : c_uint {
			DeviceExtras = 1610612737,
			AdapterExtras = 1610612738,
			RequiredLimitsExtras = 1610612739,
			PipelineLayoutExtras = 1610612740,
			ShaderModuleGLSLDescriptor = 1610612741,
			SupportedLimitsExtras = 1610612739,
		}

		public enum NativeFeature : c_uint {
			PUSH_CONSTANTS = 1610612737,
			TEXTURE_ADAPTER_SPECIFIC_FORMAT_FEATURES = 1610612738,
			MULTI_DRAW_INDIRECT = 1610612739,
			MULTI_DRAW_INDIRECT_COUNT = 1610612740,
			VERTEX_WRITABLE_STORAGE = 1610612741,
		}

		public enum LogLevel : c_uint {
			Off = 0,
			Error = 1,
			Warn = 2,
			Info = 3,
			Debug = 4,
			Trace = 5,
		}

		[CRepr]
		public struct Adapter : this(void* Handle) {
			public static Self Null => .(null);

			public c_size EnumerateFeatures(FeatureName* features) => Wgpu.AdapterEnumerateFeatures(this, features);
			public c_bool GetLimits(SupportedLimits* limits) => Wgpu.AdapterGetLimits(this, limits);
			public void GetProperties(AdapterProperties* properties) => Wgpu.AdapterGetProperties(this, properties);
			public c_bool HasFeature(FeatureName feature) => Wgpu.AdapterHasFeature(this, feature);
			public void RequestDevice(DeviceDescriptor* descriptor, RequestDeviceCallback callback, void* userdata) => Wgpu.AdapterRequestDevice(this, descriptor, callback, userdata);
			public void Drop() => Wgpu.AdapterDrop(this);
		}

		[CRepr]
		public struct BindGroup : this(void* Handle) {
			public static Self Null => .(null);

			public void SetLabel(c_char* label) => Wgpu.BindGroupSetLabel(this, label);
			public void Drop() => Wgpu.BindGroupDrop(this);
		}

		[CRepr]
		public struct BindGroupLayout : this(void* Handle) {
			public static Self Null => .(null);

			public void SetLabel(c_char* label) => Wgpu.BindGroupLayoutSetLabel(this, label);
			public void Drop() => Wgpu.BindGroupLayoutDrop(this);
		}

		[CRepr]
		public struct Buffer : this(void* Handle) {
			public static Self Null => .(null);

			public void Destroy() => Wgpu.BufferDestroy(this);
			public void* GetConstMappedRange(c_size offset, c_size size) => Wgpu.BufferGetConstMappedRange(this, offset, size);
			public void* GetMappedRange(c_size offset, c_size size) => Wgpu.BufferGetMappedRange(this, offset, size);
			public void MapAsync(MapMode mode, c_size offset, c_size size, BufferMapCallback callback, void* userdata) => Wgpu.BufferMapAsync(this, mode, offset, size, callback, userdata);
			public void SetLabel(c_char* label) => Wgpu.BufferSetLabel(this, label);
			public void Unmap() => Wgpu.BufferUnmap(this);
			public void Drop() => Wgpu.BufferDrop(this);
		}

		[CRepr]
		public struct CommandBuffer : this(void* Handle) {
			public static Self Null => .(null);

			public void SetLabel(c_char* label) => Wgpu.CommandBufferSetLabel(this, label);
			public void Drop() => Wgpu.CommandBufferDrop(this);
		}

		[CRepr]
		public struct CommandEncoder : this(void* Handle) {
			public static Self Null => .(null);

			public ComputePassEncoder BeginComputePass(ComputePassDescriptor* descriptor) => Wgpu.CommandEncoderBeginComputePass(this, descriptor);
			public RenderPassEncoder BeginRenderPass(RenderPassDescriptor* descriptor) => Wgpu.CommandEncoderBeginRenderPass(this, descriptor);
			public void ClearBuffer(Buffer buffer, uint64 offset, uint64 size) => Wgpu.CommandEncoderClearBuffer(this, buffer, offset, size);
			public void CopyBufferToBuffer(Buffer source, uint64 sourceOffset, Buffer destination, uint64 destinationOffset, uint64 size) => Wgpu.CommandEncoderCopyBufferToBuffer(this, source, sourceOffset, destination, destinationOffset, size);
			public void CopyBufferToTexture(ImageCopyBuffer* source, ImageCopyTexture* destination, Extent3D* copySize) => Wgpu.CommandEncoderCopyBufferToTexture(this, source, destination, copySize);
			public void CopyTextureToBuffer(ImageCopyTexture* source, ImageCopyBuffer* destination, Extent3D* copySize) => Wgpu.CommandEncoderCopyTextureToBuffer(this, source, destination, copySize);
			public void CopyTextureToTexture(ImageCopyTexture* source, ImageCopyTexture* destination, Extent3D* copySize) => Wgpu.CommandEncoderCopyTextureToTexture(this, source, destination, copySize);
			public CommandBuffer Finish(CommandBufferDescriptor* descriptor) => Wgpu.CommandEncoderFinish(this, descriptor);
			public void InsertDebugMarker(c_char* markerLabel) => Wgpu.CommandEncoderInsertDebugMarker(this, markerLabel);
			public void PopDebugGroup() => Wgpu.CommandEncoderPopDebugGroup(this);
			public void PushDebugGroup(c_char* groupLabel) => Wgpu.CommandEncoderPushDebugGroup(this, groupLabel);
			public void ResolveQuerySet(QuerySet querySet, uint32 firstQuery, uint32 queryCount, Buffer destination, uint64 destinationOffset) => Wgpu.CommandEncoderResolveQuerySet(this, querySet, firstQuery, queryCount, destination, destinationOffset);
			public void SetLabel(c_char* label) => Wgpu.CommandEncoderSetLabel(this, label);
			public void WriteTimestamp(QuerySet querySet, uint32 queryIndex) => Wgpu.CommandEncoderWriteTimestamp(this, querySet, queryIndex);
			public void Drop() => Wgpu.CommandEncoderDrop(this);
		}

		[CRepr]
		public struct ComputePassEncoder : this(void* Handle) {
			public static Self Null => .(null);

			public void BeginPipelineStatisticsQuery(QuerySet querySet, uint32 queryIndex) => Wgpu.ComputePassEncoderBeginPipelineStatisticsQuery(this, querySet, queryIndex);
			public void DispatchWorkgroups(uint32 workgroupCountX, uint32 workgroupCountY, uint32 workgroupCountZ) => Wgpu.ComputePassEncoderDispatchWorkgroups(this, workgroupCountX, workgroupCountY, workgroupCountZ);
			public void DispatchWorkgroupsIndirect(Buffer indirectBuffer, uint64 indirectOffset) => Wgpu.ComputePassEncoderDispatchWorkgroupsIndirect(this, indirectBuffer, indirectOffset);
			public void End() => Wgpu.ComputePassEncoderEnd(this);
			public void EndPipelineStatisticsQuery() => Wgpu.ComputePassEncoderEndPipelineStatisticsQuery(this);
			public void InsertDebugMarker(c_char* markerLabel) => Wgpu.ComputePassEncoderInsertDebugMarker(this, markerLabel);
			public void PopDebugGroup() => Wgpu.ComputePassEncoderPopDebugGroup(this);
			public void PushDebugGroup(c_char* groupLabel) => Wgpu.ComputePassEncoderPushDebugGroup(this, groupLabel);
			public void SetBindGroup(uint32 groupIndex, BindGroup group, uint32 dynamicOffsetCount, uint32* dynamicOffsets) => Wgpu.ComputePassEncoderSetBindGroup(this, groupIndex, group, dynamicOffsetCount, dynamicOffsets);
			public void SetLabel(c_char* label) => Wgpu.ComputePassEncoderSetLabel(this, label);
			public void SetPipeline(ComputePipeline pipeline) => Wgpu.ComputePassEncoderSetPipeline(this, pipeline);
		}

		[CRepr]
		public struct ComputePipeline : this(void* Handle) {
			public static Self Null => .(null);

			public BindGroupLayout GetBindGroupLayout(uint32 groupIndex) => Wgpu.ComputePipelineGetBindGroupLayout(this, groupIndex);
			public void SetLabel(c_char* label) => Wgpu.ComputePipelineSetLabel(this, label);
			public void Drop() => Wgpu.ComputePipelineDrop(this);
		}

		[CRepr]
		public struct Device : this(void* Handle) {
			public static Self Null => .(null);

			public BindGroup CreateBindGroup(BindGroupDescriptor* descriptor) => Wgpu.DeviceCreateBindGroup(this, descriptor);
			public BindGroupLayout CreateBindGroupLayout(BindGroupLayoutDescriptor* descriptor) => Wgpu.DeviceCreateBindGroupLayout(this, descriptor);
			public Buffer CreateBuffer(BufferDescriptor* descriptor) => Wgpu.DeviceCreateBuffer(this, descriptor);
			public CommandEncoder CreateCommandEncoder(CommandEncoderDescriptor* descriptor) => Wgpu.DeviceCreateCommandEncoder(this, descriptor);
			public ComputePipeline CreateComputePipeline(ComputePipelineDescriptor* descriptor) => Wgpu.DeviceCreateComputePipeline(this, descriptor);
			public void CreateComputePipelineAsync(ComputePipelineDescriptor* descriptor, CreateComputePipelineAsyncCallback callback, void* userdata) => Wgpu.DeviceCreateComputePipelineAsync(this, descriptor, callback, userdata);
			public PipelineLayout CreatePipelineLayout(PipelineLayoutDescriptor* descriptor) => Wgpu.DeviceCreatePipelineLayout(this, descriptor);
			public QuerySet CreateQuerySet(QuerySetDescriptor* descriptor) => Wgpu.DeviceCreateQuerySet(this, descriptor);
			public RenderBundleEncoder CreateRenderBundleEncoder(RenderBundleEncoderDescriptor* descriptor) => Wgpu.DeviceCreateRenderBundleEncoder(this, descriptor);
			public RenderPipeline CreateRenderPipeline(RenderPipelineDescriptor* descriptor) => Wgpu.DeviceCreateRenderPipeline(this, descriptor);
			public void CreateRenderPipelineAsync(RenderPipelineDescriptor* descriptor, CreateRenderPipelineAsyncCallback callback, void* userdata) => Wgpu.DeviceCreateRenderPipelineAsync(this, descriptor, callback, userdata);
			public Sampler CreateSampler(SamplerDescriptor* descriptor) => Wgpu.DeviceCreateSampler(this, descriptor);
			public ShaderModule CreateShaderModule(ShaderModuleDescriptor* descriptor) => Wgpu.DeviceCreateShaderModule(this, descriptor);
			public SwapChain CreateSwapChain(Surface surface, SwapChainDescriptor* descriptor) => Wgpu.DeviceCreateSwapChain(this, surface, descriptor);
			public Texture CreateTexture(TextureDescriptor* descriptor) => Wgpu.DeviceCreateTexture(this, descriptor);
			public void Destroy() => Wgpu.DeviceDestroy(this);
			public c_size EnumerateFeatures(FeatureName* features) => Wgpu.DeviceEnumerateFeatures(this, features);
			public c_bool GetLimits(SupportedLimits* limits) => Wgpu.DeviceGetLimits(this, limits);
			public Queue GetQueue() => Wgpu.DeviceGetQueue(this);
			public c_bool HasFeature(FeatureName feature) => Wgpu.DeviceHasFeature(this, feature);
			public c_bool PopErrorScope(ErrorCallback callback, void* userdata) => Wgpu.DevicePopErrorScope(this, callback, userdata);
			public void PushErrorScope(ErrorFilter filter) => Wgpu.DevicePushErrorScope(this, filter);
			public void SetDeviceLostCallback(DeviceLostCallback callback, void* userdata) => Wgpu.DeviceSetDeviceLostCallback(this, callback, userdata);
			public void SetLabel(c_char* label) => Wgpu.DeviceSetLabel(this, label);
			public void SetUncapturedErrorCallback(ErrorCallback callback, void* userdata) => Wgpu.DeviceSetUncapturedErrorCallback(this, callback, userdata);
			public c_bool Poll(c_bool wait, WrappedSubmissionIndex* wrappedSubmissionIndex) => Wgpu.DevicePoll(this, wait, wrappedSubmissionIndex);
			public void Drop() => Wgpu.DeviceDrop(this);
		}

		[CRepr]
		public struct Instance : this(void* Handle) {
			public static Self Null => .(null);

			public Surface CreateSurface(SurfaceDescriptor* descriptor) => Wgpu.InstanceCreateSurface(this, descriptor);
			public void ProcessEvents() => Wgpu.InstanceProcessEvents(this);
			public void RequestAdapter(RequestAdapterOptions* options, RequestAdapterCallback callback, void* userdata) => Wgpu.InstanceRequestAdapter(this, options, callback, userdata);
		}

		[CRepr]
		public struct PipelineLayout : this(void* Handle) {
			public static Self Null => .(null);

			public void SetLabel(c_char* label) => Wgpu.PipelineLayoutSetLabel(this, label);
			public void Drop() => Wgpu.PipelineLayoutDrop(this);
		}

		[CRepr]
		public struct QuerySet : this(void* Handle) {
			public static Self Null => .(null);

			public void Destroy() => Wgpu.QuerySetDestroy(this);
			public void SetLabel(c_char* label) => Wgpu.QuerySetSetLabel(this, label);
			public void Drop() => Wgpu.QuerySetDrop(this);
		}

		[CRepr]
		public struct Queue : this(void* Handle) {
			public static Self Null => .(null);

			public void OnSubmittedWorkDone(QueueWorkDoneCallback callback, void* userdata) => Wgpu.QueueOnSubmittedWorkDone(this, callback, userdata);
			public void SetLabel(c_char* label) => Wgpu.QueueSetLabel(this, label);
			public void Submit(uint32 commandCount, CommandBuffer* commands) => Wgpu.QueueSubmit(this, commandCount, commands);
			public void WriteBuffer(Buffer buffer, uint64 bufferOffset, void* data, c_size size) => Wgpu.QueueWriteBuffer(this, buffer, bufferOffset, data, size);
			public void WriteTexture(ImageCopyTexture* destination, void* data, c_size dataSize, TextureDataLayout* dataLayout, Extent3D* writeSize) => Wgpu.QueueWriteTexture(this, destination, data, dataSize, dataLayout, writeSize);
			public SubmissionIndex SubmitForIndex(uint32 commandCount, CommandBuffer* commands) => Wgpu.QueueSubmitForIndex(this, commandCount, commands);
		}

		[CRepr]
		public struct RenderBundle : this(void* Handle) {
			public static Self Null => .(null);

			public void Drop() => Wgpu.RenderBundleDrop(this);
		}

		[CRepr]
		public struct RenderBundleEncoder : this(void* Handle) {
			public static Self Null => .(null);

			public void Draw(uint32 vertexCount, uint32 instanceCount, uint32 firstVertex, uint32 firstInstance) => Wgpu.RenderBundleEncoderDraw(this, vertexCount, instanceCount, firstVertex, firstInstance);
			public void DrawIndexed(uint32 indexCount, uint32 instanceCount, uint32 firstIndex, int32 baseVertex, uint32 firstInstance) => Wgpu.RenderBundleEncoderDrawIndexed(this, indexCount, instanceCount, firstIndex, baseVertex, firstInstance);
			public void DrawIndexedIndirect(Buffer indirectBuffer, uint64 indirectOffset) => Wgpu.RenderBundleEncoderDrawIndexedIndirect(this, indirectBuffer, indirectOffset);
			public void DrawIndirect(Buffer indirectBuffer, uint64 indirectOffset) => Wgpu.RenderBundleEncoderDrawIndirect(this, indirectBuffer, indirectOffset);
			public RenderBundle Finish(RenderBundleDescriptor* descriptor) => Wgpu.RenderBundleEncoderFinish(this, descriptor);
			public void InsertDebugMarker(c_char* markerLabel) => Wgpu.RenderBundleEncoderInsertDebugMarker(this, markerLabel);
			public void PopDebugGroup() => Wgpu.RenderBundleEncoderPopDebugGroup(this);
			public void PushDebugGroup(c_char* groupLabel) => Wgpu.RenderBundleEncoderPushDebugGroup(this, groupLabel);
			public void SetBindGroup(uint32 groupIndex, BindGroup group, uint32 dynamicOffsetCount, uint32* dynamicOffsets) => Wgpu.RenderBundleEncoderSetBindGroup(this, groupIndex, group, dynamicOffsetCount, dynamicOffsets);
			public void SetIndexBuffer(Buffer buffer, IndexFormat format, uint64 offset, uint64 size) => Wgpu.RenderBundleEncoderSetIndexBuffer(this, buffer, format, offset, size);
			public void SetLabel(c_char* label) => Wgpu.RenderBundleEncoderSetLabel(this, label);
			public void SetPipeline(RenderPipeline pipeline) => Wgpu.RenderBundleEncoderSetPipeline(this, pipeline);
			public void SetVertexBuffer(uint32 slot, Buffer buffer, uint64 offset, uint64 size) => Wgpu.RenderBundleEncoderSetVertexBuffer(this, slot, buffer, offset, size);
		}

		[CRepr]
		public struct RenderPassEncoder : this(void* Handle) {
			public static Self Null => .(null);

			public void BeginOcclusionQuery(uint32 queryIndex) => Wgpu.RenderPassEncoderBeginOcclusionQuery(this, queryIndex);
			public void BeginPipelineStatisticsQuery(QuerySet querySet, uint32 queryIndex) => Wgpu.RenderPassEncoderBeginPipelineStatisticsQuery(this, querySet, queryIndex);
			public void Draw(uint32 vertexCount, uint32 instanceCount, uint32 firstVertex, uint32 firstInstance) => Wgpu.RenderPassEncoderDraw(this, vertexCount, instanceCount, firstVertex, firstInstance);
			public void DrawIndexed(uint32 indexCount, uint32 instanceCount, uint32 firstIndex, int32 baseVertex, uint32 firstInstance) => Wgpu.RenderPassEncoderDrawIndexed(this, indexCount, instanceCount, firstIndex, baseVertex, firstInstance);
			public void DrawIndexedIndirect(Buffer indirectBuffer, uint64 indirectOffset) => Wgpu.RenderPassEncoderDrawIndexedIndirect(this, indirectBuffer, indirectOffset);
			public void DrawIndirect(Buffer indirectBuffer, uint64 indirectOffset) => Wgpu.RenderPassEncoderDrawIndirect(this, indirectBuffer, indirectOffset);
			public void End() => Wgpu.RenderPassEncoderEnd(this);
			public void EndOcclusionQuery() => Wgpu.RenderPassEncoderEndOcclusionQuery(this);
			public void EndPipelineStatisticsQuery() => Wgpu.RenderPassEncoderEndPipelineStatisticsQuery(this);
			public void ExecuteBundles(uint32 bundlesCount, RenderBundle* bundles) => Wgpu.RenderPassEncoderExecuteBundles(this, bundlesCount, bundles);
			public void InsertDebugMarker(c_char* markerLabel) => Wgpu.RenderPassEncoderInsertDebugMarker(this, markerLabel);
			public void PopDebugGroup() => Wgpu.RenderPassEncoderPopDebugGroup(this);
			public void PushDebugGroup(c_char* groupLabel) => Wgpu.RenderPassEncoderPushDebugGroup(this, groupLabel);
			public void SetBindGroup(uint32 groupIndex, BindGroup group, uint32 dynamicOffsetCount, uint32* dynamicOffsets) => Wgpu.RenderPassEncoderSetBindGroup(this, groupIndex, group, dynamicOffsetCount, dynamicOffsets);
			public void SetBlendConstant(Color* color) => Wgpu.RenderPassEncoderSetBlendConstant(this, color);
			public void SetIndexBuffer(Buffer buffer, IndexFormat format, uint64 offset, uint64 size) => Wgpu.RenderPassEncoderSetIndexBuffer(this, buffer, format, offset, size);
			public void SetLabel(c_char* label) => Wgpu.RenderPassEncoderSetLabel(this, label);
			public void SetPipeline(RenderPipeline pipeline) => Wgpu.RenderPassEncoderSetPipeline(this, pipeline);
			public void SetScissorRect(uint32 x, uint32 y, uint32 width, uint32 height) => Wgpu.RenderPassEncoderSetScissorRect(this, x, y, width, height);
			public void SetStencilReference(uint32 reference) => Wgpu.RenderPassEncoderSetStencilReference(this, reference);
			public void SetVertexBuffer(uint32 slot, Buffer buffer, uint64 offset, uint64 size) => Wgpu.RenderPassEncoderSetVertexBuffer(this, slot, buffer, offset, size);
			public void SetViewport(float x, float y, float width, float height, float minDepth, float maxDepth) => Wgpu.RenderPassEncoderSetViewport(this, x, y, width, height, minDepth, maxDepth);
			public void SetPushConstants(ShaderStage stages, uint32 offset, uint32 sizeBytes, void* data) => Wgpu.RenderPassEncoderSetPushConstants(this, stages, offset, sizeBytes, data);
			public void MultiDrawIndirect(Buffer buffer, uint64 offset, uint32 count) => Wgpu.RenderPassEncoderMultiDrawIndirect(this, buffer, offset, count);
			public void MultiDrawIndexedIndirect(Buffer buffer, uint64 offset, uint32 count) => Wgpu.RenderPassEncoderMultiDrawIndexedIndirect(this, buffer, offset, count);
			public void MultiDrawIndirectCount(Buffer buffer, uint64 offset, Buffer count_buffer, uint64 count_buffer_offset, uint32 max_count) => Wgpu.RenderPassEncoderMultiDrawIndirectCount(this, buffer, offset, count_buffer, count_buffer_offset, max_count);
			public void MultiDrawIndexedIndirectCount(Buffer buffer, uint64 offset, Buffer count_buffer, uint64 count_buffer_offset, uint32 max_count) => Wgpu.RenderPassEncoderMultiDrawIndexedIndirectCount(this, buffer, offset, count_buffer, count_buffer_offset, max_count);
		}

		[CRepr]
		public struct RenderPipeline : this(void* Handle) {
			public static Self Null => .(null);

			public BindGroupLayout GetBindGroupLayout(uint32 groupIndex) => Wgpu.RenderPipelineGetBindGroupLayout(this, groupIndex);
			public void SetLabel(c_char* label) => Wgpu.RenderPipelineSetLabel(this, label);
			public void Drop() => Wgpu.RenderPipelineDrop(this);
		}

		[CRepr]
		public struct Sampler : this(void* Handle) {
			public static Self Null => .(null);

			public void SetLabel(c_char* label) => Wgpu.SamplerSetLabel(this, label);
			public void Drop() => Wgpu.SamplerDrop(this);
		}

		[CRepr]
		public struct ShaderModule : this(void* Handle) {
			public static Self Null => .(null);

			public void GetCompilationInfo(CompilationInfoCallback callback, void* userdata) => Wgpu.ShaderModuleGetCompilationInfo(this, callback, userdata);
			public void SetLabel(c_char* label) => Wgpu.ShaderModuleSetLabel(this, label);
			public void Drop() => Wgpu.ShaderModuleDrop(this);
		}

		[CRepr]
		public struct Surface : this(void* Handle) {
			public static Self Null => .(null);

			public TextureFormat GetPreferredFormat(Adapter adapter) => Wgpu.SurfaceGetPreferredFormat(this, adapter);
			public TextureFormat* GetSupportedFormats(Adapter adapter, c_size* count) => Wgpu.SurfaceGetSupportedFormats(this, adapter, count);
			public PresentMode* GetSupportedPresentModes(Adapter adapter, c_size* count) => Wgpu.SurfaceGetSupportedPresentModes(this, adapter, count);
			public void Drop() => Wgpu.SurfaceDrop(this);
		}

		[CRepr]
		public struct SwapChain : this(void* Handle) {
			public static Self Null => .(null);

			public TextureView GetCurrentTextureView() => Wgpu.SwapChainGetCurrentTextureView(this);
			public void Present() => Wgpu.SwapChainPresent(this);
		}

		[CRepr]
		public struct Texture : this(void* Handle) {
			public static Self Null => .(null);

			public TextureView CreateView(TextureViewDescriptor* descriptor) => Wgpu.TextureCreateView(this, descriptor);
			public void Destroy() => Wgpu.TextureDestroy(this);
			public void SetLabel(c_char* label) => Wgpu.TextureSetLabel(this, label);
			public void Drop() => Wgpu.TextureDrop(this);
		}

		[CRepr]
		public struct TextureView : this(void* Handle) {
			public static Self Null => .(null);

			public void SetLabel(c_char* label) => Wgpu.TextureViewSetLabel(this, label);
			public void Drop() => Wgpu.TextureViewDrop(this);
		}

		[CRepr]
		public struct ChainedStruct {
			public ChainedStruct* next;
			public SType sType;

			public this() {
				this = default;
			}

			public this(ChainedStruct* next, SType sType) {
				this.next = next;
				this.sType = sType;
			}
		}

		[CRepr]
		public struct ChainedStructOut {
			public ChainedStructOut* next;
			public SType sType;

			public this() {
				this = default;
			}

			public this(ChainedStructOut* next, SType sType) {
				this.next = next;
				this.sType = sType;
			}
		}

		[CRepr]
		public struct AdapterProperties {
			public ChainedStructOut* nextInChain;
			public uint32 vendorID;
			public uint32 deviceID;
			public c_char* name;
			public c_char* driverDescription;
			public AdapterType adapterType;
			public BackendType backendType;

			public this() {
				this = default;
			}

			public this(ChainedStructOut* nextInChain, uint32 vendorID, uint32 deviceID, c_char* name, c_char* driverDescription, AdapterType adapterType, BackendType backendType) {
				this.nextInChain = nextInChain;
				this.vendorID = vendorID;
				this.deviceID = deviceID;
				this.name = name;
				this.driverDescription = driverDescription;
				this.adapterType = adapterType;
				this.backendType = backendType;
			}
		}

		[CRepr]
		public struct BindGroupEntry {
			public ChainedStruct* nextInChain;
			public uint32 binding;
			public Buffer buffer;
			public uint64 offset;
			public uint64 size;
			public Sampler sampler;
			public TextureView textureView;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, uint32 binding, Buffer buffer, uint64 offset, uint64 size, Sampler sampler, TextureView textureView) {
				this.nextInChain = nextInChain;
				this.binding = binding;
				this.buffer = buffer;
				this.offset = offset;
				this.size = size;
				this.sampler = sampler;
				this.textureView = textureView;
			}
		}

		[CRepr]
		public struct BlendComponent {
			public BlendOperation operation;
			public BlendFactor srcFactor;
			public BlendFactor dstFactor;

			public this() {
				this = default;
			}

			public this(BlendOperation operation, BlendFactor srcFactor, BlendFactor dstFactor) {
				this.operation = operation;
				this.srcFactor = srcFactor;
				this.dstFactor = dstFactor;
			}
		}

		[CRepr]
		public struct BufferBindingLayout {
			public ChainedStruct* nextInChain;
			public BufferBindingType type;
			public c_bool hasDynamicOffset;
			public uint64 minBindingSize;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, BufferBindingType type, c_bool hasDynamicOffset, uint64 minBindingSize) {
				this.nextInChain = nextInChain;
				this.type = type;
				this.hasDynamicOffset = hasDynamicOffset;
				this.minBindingSize = minBindingSize;
			}
		}

		[CRepr]
		public struct BufferDescriptor {
			public ChainedStruct* nextInChain;
			public c_char* label;
			public BufferUsage usage;
			public uint64 size;
			public c_bool mappedAtCreation;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, c_char* label, BufferUsage usage, uint64 size, c_bool mappedAtCreation) {
				this.nextInChain = nextInChain;
				this.label = label;
				this.usage = usage;
				this.size = size;
				this.mappedAtCreation = mappedAtCreation;
			}
		}

		[CRepr]
		public struct Color {
			public double r;
			public double g;
			public double b;
			public double a;

			public this() {
				this = default;
			}

			public this(double r, double g, double b, double a) {
				this.r = r;
				this.g = g;
				this.b = b;
				this.a = a;
			}
		}

		[CRepr]
		public struct CommandBufferDescriptor {
			public ChainedStruct* nextInChain;
			public c_char* label;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, c_char* label) {
				this.nextInChain = nextInChain;
				this.label = label;
			}
		}

		[CRepr]
		public struct CommandEncoderDescriptor {
			public ChainedStruct* nextInChain;
			public c_char* label;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, c_char* label) {
				this.nextInChain = nextInChain;
				this.label = label;
			}
		}

		[CRepr]
		public struct CompilationMessage {
			public ChainedStruct* nextInChain;
			public c_char* message;
			public CompilationMessageType type;
			public uint64 lineNum;
			public uint64 linePos;
			public uint64 offset;
			public uint64 length;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, c_char* message, CompilationMessageType type, uint64 lineNum, uint64 linePos, uint64 offset, uint64 length) {
				this.nextInChain = nextInChain;
				this.message = message;
				this.type = type;
				this.lineNum = lineNum;
				this.linePos = linePos;
				this.offset = offset;
				this.length = length;
			}
		}

		[CRepr]
		public struct ComputePassTimestampWrite {
			public QuerySet querySet;
			public uint32 queryIndex;
			public ComputePassTimestampLocation location;

			public this() {
				this = default;
			}

			public this(QuerySet querySet, uint32 queryIndex, ComputePassTimestampLocation location) {
				this.querySet = querySet;
				this.queryIndex = queryIndex;
				this.location = location;
			}
		}

		[CRepr]
		public struct ConstantEntry {
			public ChainedStruct* nextInChain;
			public c_char* key;
			public double value;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, c_char* key, double value) {
				this.nextInChain = nextInChain;
				this.key = key;
				this.value = value;
			}
		}

		[CRepr]
		public struct Extent3D {
			public uint32 width;
			public uint32 height;
			public uint32 depthOrArrayLayers;

			public this() {
				this = default;
			}

			public this(uint32 width, uint32 height, uint32 depthOrArrayLayers) {
				this.width = width;
				this.height = height;
				this.depthOrArrayLayers = depthOrArrayLayers;
			}
		}

		[CRepr]
		public struct InstanceDescriptor {
			public ChainedStruct* nextInChain;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain) {
				this.nextInChain = nextInChain;
			}
		}

		[CRepr]
		public struct Limits {
			public uint32 maxTextureDimension1D;
			public uint32 maxTextureDimension2D;
			public uint32 maxTextureDimension3D;
			public uint32 maxTextureArrayLayers;
			public uint32 maxBindGroups;
			public uint32 maxDynamicUniformBuffersPerPipelineLayout;
			public uint32 maxDynamicStorageBuffersPerPipelineLayout;
			public uint32 maxSampledTexturesPerShaderStage;
			public uint32 maxSamplersPerShaderStage;
			public uint32 maxStorageBuffersPerShaderStage;
			public uint32 maxStorageTexturesPerShaderStage;
			public uint32 maxUniformBuffersPerShaderStage;
			public uint64 maxUniformBufferBindingSize;
			public uint64 maxStorageBufferBindingSize;
			public uint32 minUniformBufferOffsetAlignment;
			public uint32 minStorageBufferOffsetAlignment;
			public uint32 maxVertexBuffers;
			public uint32 maxVertexAttributes;
			public uint32 maxVertexBufferArrayStride;
			public uint32 maxInterStageShaderComponents;
			public uint32 maxComputeWorkgroupStorageSize;
			public uint32 maxComputeInvocationsPerWorkgroup;
			public uint32 maxComputeWorkgroupSizeX;
			public uint32 maxComputeWorkgroupSizeY;
			public uint32 maxComputeWorkgroupSizeZ;
			public uint32 maxComputeWorkgroupsPerDimension;

			public this() {
				this = default;
			}

			public this(uint32 maxTextureDimension1D, uint32 maxTextureDimension2D, uint32 maxTextureDimension3D, uint32 maxTextureArrayLayers, uint32 maxBindGroups, uint32 maxDynamicUniformBuffersPerPipelineLayout, uint32 maxDynamicStorageBuffersPerPipelineLayout, uint32 maxSampledTexturesPerShaderStage, uint32 maxSamplersPerShaderStage, uint32 maxStorageBuffersPerShaderStage, uint32 maxStorageTexturesPerShaderStage, uint32 maxUniformBuffersPerShaderStage, uint64 maxUniformBufferBindingSize, uint64 maxStorageBufferBindingSize, uint32 minUniformBufferOffsetAlignment, uint32 minStorageBufferOffsetAlignment, uint32 maxVertexBuffers, uint32 maxVertexAttributes, uint32 maxVertexBufferArrayStride, uint32 maxInterStageShaderComponents, uint32 maxComputeWorkgroupStorageSize, uint32 maxComputeInvocationsPerWorkgroup, uint32 maxComputeWorkgroupSizeX, uint32 maxComputeWorkgroupSizeY, uint32 maxComputeWorkgroupSizeZ, uint32 maxComputeWorkgroupsPerDimension) {
				this.maxTextureDimension1D = maxTextureDimension1D;
				this.maxTextureDimension2D = maxTextureDimension2D;
				this.maxTextureDimension3D = maxTextureDimension3D;
				this.maxTextureArrayLayers = maxTextureArrayLayers;
				this.maxBindGroups = maxBindGroups;
				this.maxDynamicUniformBuffersPerPipelineLayout = maxDynamicUniformBuffersPerPipelineLayout;
				this.maxDynamicStorageBuffersPerPipelineLayout = maxDynamicStorageBuffersPerPipelineLayout;
				this.maxSampledTexturesPerShaderStage = maxSampledTexturesPerShaderStage;
				this.maxSamplersPerShaderStage = maxSamplersPerShaderStage;
				this.maxStorageBuffersPerShaderStage = maxStorageBuffersPerShaderStage;
				this.maxStorageTexturesPerShaderStage = maxStorageTexturesPerShaderStage;
				this.maxUniformBuffersPerShaderStage = maxUniformBuffersPerShaderStage;
				this.maxUniformBufferBindingSize = maxUniformBufferBindingSize;
				this.maxStorageBufferBindingSize = maxStorageBufferBindingSize;
				this.minUniformBufferOffsetAlignment = minUniformBufferOffsetAlignment;
				this.minStorageBufferOffsetAlignment = minStorageBufferOffsetAlignment;
				this.maxVertexBuffers = maxVertexBuffers;
				this.maxVertexAttributes = maxVertexAttributes;
				this.maxVertexBufferArrayStride = maxVertexBufferArrayStride;
				this.maxInterStageShaderComponents = maxInterStageShaderComponents;
				this.maxComputeWorkgroupStorageSize = maxComputeWorkgroupStorageSize;
				this.maxComputeInvocationsPerWorkgroup = maxComputeInvocationsPerWorkgroup;
				this.maxComputeWorkgroupSizeX = maxComputeWorkgroupSizeX;
				this.maxComputeWorkgroupSizeY = maxComputeWorkgroupSizeY;
				this.maxComputeWorkgroupSizeZ = maxComputeWorkgroupSizeZ;
				this.maxComputeWorkgroupsPerDimension = maxComputeWorkgroupsPerDimension;
			}
		}

		[CRepr]
		public struct MultisampleState {
			public ChainedStruct* nextInChain;
			public uint32 count;
			public uint32 mask;
			public c_bool alphaToCoverageEnabled;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, uint32 count, uint32 mask, c_bool alphaToCoverageEnabled) {
				this.nextInChain = nextInChain;
				this.count = count;
				this.mask = mask;
				this.alphaToCoverageEnabled = alphaToCoverageEnabled;
			}
		}

		[CRepr]
		public struct Origin3D {
			public uint32 x;
			public uint32 y;
			public uint32 z;

			public this() {
				this = default;
			}

			public this(uint32 x, uint32 y, uint32 z) {
				this.x = x;
				this.y = y;
				this.z = z;
			}
		}

		[CRepr]
		public struct PipelineLayoutDescriptor {
			public ChainedStruct* nextInChain;
			public c_char* label;
			public uint32 bindGroupLayoutCount;
			public BindGroupLayout* bindGroupLayouts;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, c_char* label, uint32 bindGroupLayoutCount, BindGroupLayout* bindGroupLayouts) {
				this.nextInChain = nextInChain;
				this.label = label;
				this.bindGroupLayoutCount = bindGroupLayoutCount;
				this.bindGroupLayouts = bindGroupLayouts;
			}
		}

		[CRepr]
		public struct PrimitiveDepthClipControl {
			public ChainedStruct chain;
			public c_bool unclippedDepth;

			public this() {
				this = default;
			}

			public this(ChainedStruct chain, c_bool unclippedDepth) {
				this.chain = chain;
				this.unclippedDepth = unclippedDepth;
			}
		}

		[CRepr]
		public struct PrimitiveState {
			public ChainedStruct* nextInChain;
			public PrimitiveTopology topology;
			public IndexFormat stripIndexFormat;
			public FrontFace frontFace;
			public CullMode cullMode;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, PrimitiveTopology topology, IndexFormat stripIndexFormat, FrontFace frontFace, CullMode cullMode) {
				this.nextInChain = nextInChain;
				this.topology = topology;
				this.stripIndexFormat = stripIndexFormat;
				this.frontFace = frontFace;
				this.cullMode = cullMode;
			}
		}

		[CRepr]
		public struct QuerySetDescriptor {
			public ChainedStruct* nextInChain;
			public c_char* label;
			public QueryType type;
			public uint32 count;
			public PipelineStatisticName* pipelineStatistics;
			public uint32 pipelineStatisticsCount;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, c_char* label, QueryType type, uint32 count, PipelineStatisticName* pipelineStatistics, uint32 pipelineStatisticsCount) {
				this.nextInChain = nextInChain;
				this.label = label;
				this.type = type;
				this.count = count;
				this.pipelineStatistics = pipelineStatistics;
				this.pipelineStatisticsCount = pipelineStatisticsCount;
			}
		}

		[CRepr]
		public struct QueueDescriptor {
			public ChainedStruct* nextInChain;
			public c_char* label;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, c_char* label) {
				this.nextInChain = nextInChain;
				this.label = label;
			}
		}

		[CRepr]
		public struct RenderBundleDescriptor {
			public ChainedStruct* nextInChain;
			public c_char* label;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, c_char* label) {
				this.nextInChain = nextInChain;
				this.label = label;
			}
		}

		[CRepr]
		public struct RenderBundleEncoderDescriptor {
			public ChainedStruct* nextInChain;
			public c_char* label;
			public uint32 colorFormatsCount;
			public TextureFormat* colorFormats;
			public TextureFormat depthStencilFormat;
			public uint32 sampleCount;
			public c_bool depthReadOnly;
			public c_bool stencilReadOnly;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, c_char* label, uint32 colorFormatsCount, TextureFormat* colorFormats, TextureFormat depthStencilFormat, uint32 sampleCount, c_bool depthReadOnly, c_bool stencilReadOnly) {
				this.nextInChain = nextInChain;
				this.label = label;
				this.colorFormatsCount = colorFormatsCount;
				this.colorFormats = colorFormats;
				this.depthStencilFormat = depthStencilFormat;
				this.sampleCount = sampleCount;
				this.depthReadOnly = depthReadOnly;
				this.stencilReadOnly = stencilReadOnly;
			}
		}

		[CRepr]
		public struct RenderPassDepthStencilAttachment {
			public TextureView view;
			public LoadOp depthLoadOp;
			public StoreOp depthStoreOp;
			public float depthClearValue;
			public c_bool depthReadOnly;
			public LoadOp stencilLoadOp;
			public StoreOp stencilStoreOp;
			public uint32 stencilClearValue;
			public c_bool stencilReadOnly;

			public this() {
				this = default;
			}

			public this(TextureView view, LoadOp depthLoadOp, StoreOp depthStoreOp, float depthClearValue, c_bool depthReadOnly, LoadOp stencilLoadOp, StoreOp stencilStoreOp, uint32 stencilClearValue, c_bool stencilReadOnly) {
				this.view = view;
				this.depthLoadOp = depthLoadOp;
				this.depthStoreOp = depthStoreOp;
				this.depthClearValue = depthClearValue;
				this.depthReadOnly = depthReadOnly;
				this.stencilLoadOp = stencilLoadOp;
				this.stencilStoreOp = stencilStoreOp;
				this.stencilClearValue = stencilClearValue;
				this.stencilReadOnly = stencilReadOnly;
			}
		}

		[CRepr]
		public struct RenderPassTimestampWrite {
			public QuerySet querySet;
			public uint32 queryIndex;
			public RenderPassTimestampLocation location;

			public this() {
				this = default;
			}

			public this(QuerySet querySet, uint32 queryIndex, RenderPassTimestampLocation location) {
				this.querySet = querySet;
				this.queryIndex = queryIndex;
				this.location = location;
			}
		}

		[CRepr]
		public struct RequestAdapterOptions {
			public ChainedStruct* nextInChain;
			public Surface compatibleSurface;
			public PowerPreference powerPreference;
			public c_bool forceFallbackAdapter;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, Surface compatibleSurface, PowerPreference powerPreference, c_bool forceFallbackAdapter) {
				this.nextInChain = nextInChain;
				this.compatibleSurface = compatibleSurface;
				this.powerPreference = powerPreference;
				this.forceFallbackAdapter = forceFallbackAdapter;
			}
		}

		[CRepr]
		public struct SamplerBindingLayout {
			public ChainedStruct* nextInChain;
			public SamplerBindingType type;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, SamplerBindingType type) {
				this.nextInChain = nextInChain;
				this.type = type;
			}
		}

		[CRepr]
		public struct SamplerDescriptor {
			public ChainedStruct* nextInChain;
			public c_char* label;
			public AddressMode addressModeU;
			public AddressMode addressModeV;
			public AddressMode addressModeW;
			public FilterMode magFilter;
			public FilterMode minFilter;
			public MipmapFilterMode mipmapFilter;
			public float lodMinClamp;
			public float lodMaxClamp;
			public CompareFunction compare;
			public uint16 maxAnisotropy;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, c_char* label, AddressMode addressModeU, AddressMode addressModeV, AddressMode addressModeW, FilterMode magFilter, FilterMode minFilter, MipmapFilterMode mipmapFilter, float lodMinClamp, float lodMaxClamp, CompareFunction compare, uint16 maxAnisotropy) {
				this.nextInChain = nextInChain;
				this.label = label;
				this.addressModeU = addressModeU;
				this.addressModeV = addressModeV;
				this.addressModeW = addressModeW;
				this.magFilter = magFilter;
				this.minFilter = minFilter;
				this.mipmapFilter = mipmapFilter;
				this.lodMinClamp = lodMinClamp;
				this.lodMaxClamp = lodMaxClamp;
				this.compare = compare;
				this.maxAnisotropy = maxAnisotropy;
			}
		}

		[CRepr]
		public struct ShaderModuleCompilationHint {
			public ChainedStruct* nextInChain;
			public c_char* entryPoint;
			public PipelineLayout layout;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, c_char* entryPoint, PipelineLayout layout) {
				this.nextInChain = nextInChain;
				this.entryPoint = entryPoint;
				this.layout = layout;
			}
		}

		[CRepr]
		public struct ShaderModuleSPIRVDescriptor {
			public ChainedStruct chain;
			public uint32 codeSize;
			public uint32* code;

			public this() {
				this = default;
			}

			public this(ChainedStruct chain, uint32 codeSize, uint32* code) {
				this.chain = chain;
				this.codeSize = codeSize;
				this.code = code;
			}
		}

		[CRepr]
		public struct ShaderModuleWGSLDescriptor {
			public ChainedStruct chain;
			public c_char* code;

			public this() {
				this = default;
			}

			public this(ChainedStruct chain, c_char* code) {
				this.chain = chain;
				this.code = code;
			}
		}

		[CRepr]
		public struct StencilFaceState {
			public CompareFunction compare;
			public StencilOperation failOp;
			public StencilOperation depthFailOp;
			public StencilOperation passOp;

			public this() {
				this = default;
			}

			public this(CompareFunction compare, StencilOperation failOp, StencilOperation depthFailOp, StencilOperation passOp) {
				this.compare = compare;
				this.failOp = failOp;
				this.depthFailOp = depthFailOp;
				this.passOp = passOp;
			}
		}

		[CRepr]
		public struct StorageTextureBindingLayout {
			public ChainedStruct* nextInChain;
			public StorageTextureAccess access;
			public TextureFormat format;
			public TextureViewDimension viewDimension;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, StorageTextureAccess access, TextureFormat format, TextureViewDimension viewDimension) {
				this.nextInChain = nextInChain;
				this.access = access;
				this.format = format;
				this.viewDimension = viewDimension;
			}
		}

		[CRepr]
		public struct SurfaceDescriptor {
			public ChainedStruct* nextInChain;
			public c_char* label;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, c_char* label) {
				this.nextInChain = nextInChain;
				this.label = label;
			}
		}

		[CRepr]
		public struct SurfaceDescriptorFromAndroidNativeWindow {
			public ChainedStruct chain;
			public void* window;

			public this() {
				this = default;
			}

			public this(ChainedStruct chain, void* window) {
				this.chain = chain;
				this.window = window;
			}
		}

		[CRepr]
		public struct SurfaceDescriptorFromCanvasHTMLSelector {
			public ChainedStruct chain;
			public c_char* selector;

			public this() {
				this = default;
			}

			public this(ChainedStruct chain, c_char* selector) {
				this.chain = chain;
				this.selector = selector;
			}
		}

		[CRepr]
		public struct SurfaceDescriptorFromMetalLayer {
			public ChainedStruct chain;
			public void* layer;

			public this() {
				this = default;
			}

			public this(ChainedStruct chain, void* layer) {
				this.chain = chain;
				this.layer = layer;
			}
		}

		[CRepr]
		public struct SurfaceDescriptorFromWaylandSurface {
			public ChainedStruct chain;
			public void* display;
			public void* surface;

			public this() {
				this = default;
			}

			public this(ChainedStruct chain, void* display, void* surface) {
				this.chain = chain;
				this.display = display;
				this.surface = surface;
			}
		}

		[CRepr]
		public struct SurfaceDescriptorFromWindowsHWND {
			public ChainedStruct chain;
			public void* hinstance;
			public void* hwnd;

			public this() {
				this = default;
			}

			public this(ChainedStruct chain, void* hinstance, void* hwnd) {
				this.chain = chain;
				this.hinstance = hinstance;
				this.hwnd = hwnd;
			}
		}

		[CRepr]
		public struct SurfaceDescriptorFromXcbWindow {
			public ChainedStruct chain;
			public void* connection;
			public uint32 window;

			public this() {
				this = default;
			}

			public this(ChainedStruct chain, void* connection, uint32 window) {
				this.chain = chain;
				this.connection = connection;
				this.window = window;
			}
		}

		[CRepr]
		public struct SurfaceDescriptorFromXlibWindow {
			public ChainedStruct chain;
			public void* display;
			public uint32 window;

			public this() {
				this = default;
			}

			public this(ChainedStruct chain, void* display, uint32 window) {
				this.chain = chain;
				this.display = display;
				this.window = window;
			}
		}

		[CRepr]
		public struct SwapChainDescriptor {
			public ChainedStruct* nextInChain;
			public c_char* label;
			public TextureUsage usage;
			public TextureFormat format;
			public uint32 width;
			public uint32 height;
			public PresentMode presentMode;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, c_char* label, TextureUsage usage, TextureFormat format, uint32 width, uint32 height, PresentMode presentMode) {
				this.nextInChain = nextInChain;
				this.label = label;
				this.usage = usage;
				this.format = format;
				this.width = width;
				this.height = height;
				this.presentMode = presentMode;
			}
		}

		[CRepr]
		public struct TextureBindingLayout {
			public ChainedStruct* nextInChain;
			public TextureSampleType sampleType;
			public TextureViewDimension viewDimension;
			public c_bool multisampled;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, TextureSampleType sampleType, TextureViewDimension viewDimension, c_bool multisampled) {
				this.nextInChain = nextInChain;
				this.sampleType = sampleType;
				this.viewDimension = viewDimension;
				this.multisampled = multisampled;
			}
		}

		[CRepr]
		public struct TextureDataLayout {
			public ChainedStruct* nextInChain;
			public uint64 offset;
			public uint32 bytesPerRow;
			public uint32 rowsPerImage;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, uint64 offset, uint32 bytesPerRow, uint32 rowsPerImage) {
				this.nextInChain = nextInChain;
				this.offset = offset;
				this.bytesPerRow = bytesPerRow;
				this.rowsPerImage = rowsPerImage;
			}
		}

		[CRepr]
		public struct TextureViewDescriptor {
			public ChainedStruct* nextInChain;
			public c_char* label;
			public TextureFormat format;
			public TextureViewDimension dimension;
			public uint32 baseMipLevel;
			public uint32 mipLevelCount;
			public uint32 baseArrayLayer;
			public uint32 arrayLayerCount;
			public TextureAspect aspect;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, c_char* label, TextureFormat format, TextureViewDimension dimension, uint32 baseMipLevel, uint32 mipLevelCount, uint32 baseArrayLayer, uint32 arrayLayerCount, TextureAspect aspect) {
				this.nextInChain = nextInChain;
				this.label = label;
				this.format = format;
				this.dimension = dimension;
				this.baseMipLevel = baseMipLevel;
				this.mipLevelCount = mipLevelCount;
				this.baseArrayLayer = baseArrayLayer;
				this.arrayLayerCount = arrayLayerCount;
				this.aspect = aspect;
			}
		}

		[CRepr]
		public struct VertexAttribute {
			public VertexFormat format;
			public uint64 offset;
			public uint32 shaderLocation;

			public this() {
				this = default;
			}

			public this(VertexFormat format, uint64 offset, uint32 shaderLocation) {
				this.format = format;
				this.offset = offset;
				this.shaderLocation = shaderLocation;
			}
		}

		[CRepr]
		public struct BindGroupDescriptor {
			public ChainedStruct* nextInChain;
			public c_char* label;
			public BindGroupLayout layout;
			public uint32 entryCount;
			public BindGroupEntry* entries;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, c_char* label, BindGroupLayout layout, uint32 entryCount, BindGroupEntry* entries) {
				this.nextInChain = nextInChain;
				this.label = label;
				this.layout = layout;
				this.entryCount = entryCount;
				this.entries = entries;
			}
		}

		[CRepr]
		public struct BindGroupLayoutEntry {
			public ChainedStruct* nextInChain;
			public uint32 binding;
			public ShaderStage visibility;
			public BufferBindingLayout buffer;
			public SamplerBindingLayout sampler;
			public TextureBindingLayout texture;
			public StorageTextureBindingLayout storageTexture;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, uint32 binding, ShaderStage visibility, BufferBindingLayout buffer, SamplerBindingLayout sampler, TextureBindingLayout texture, StorageTextureBindingLayout storageTexture) {
				this.nextInChain = nextInChain;
				this.binding = binding;
				this.visibility = visibility;
				this.buffer = buffer;
				this.sampler = sampler;
				this.texture = texture;
				this.storageTexture = storageTexture;
			}
		}

		[CRepr]
		public struct BlendState {
			public BlendComponent color;
			public BlendComponent alpha;

			public this() {
				this = default;
			}

			public this(BlendComponent color, BlendComponent alpha) {
				this.color = color;
				this.alpha = alpha;
			}
		}

		[CRepr]
		public struct CompilationInfo {
			public ChainedStruct* nextInChain;
			public uint32 messageCount;
			public CompilationMessage* messages;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, uint32 messageCount, CompilationMessage* messages) {
				this.nextInChain = nextInChain;
				this.messageCount = messageCount;
				this.messages = messages;
			}
		}

		[CRepr]
		public struct ComputePassDescriptor {
			public ChainedStruct* nextInChain;
			public c_char* label;
			public uint32 timestampWriteCount;
			public ComputePassTimestampWrite* timestampWrites;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, c_char* label, uint32 timestampWriteCount, ComputePassTimestampWrite* timestampWrites) {
				this.nextInChain = nextInChain;
				this.label = label;
				this.timestampWriteCount = timestampWriteCount;
				this.timestampWrites = timestampWrites;
			}
		}

		[CRepr]
		public struct DepthStencilState {
			public ChainedStruct* nextInChain;
			public TextureFormat format;
			public c_bool depthWriteEnabled;
			public CompareFunction depthCompare;
			public StencilFaceState stencilFront;
			public StencilFaceState stencilBack;
			public uint32 stencilReadMask;
			public uint32 stencilWriteMask;
			public int32 depthBias;
			public float depthBiasSlopeScale;
			public float depthBiasClamp;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, TextureFormat format, c_bool depthWriteEnabled, CompareFunction depthCompare, StencilFaceState stencilFront, StencilFaceState stencilBack, uint32 stencilReadMask, uint32 stencilWriteMask, int32 depthBias, float depthBiasSlopeScale, float depthBiasClamp) {
				this.nextInChain = nextInChain;
				this.format = format;
				this.depthWriteEnabled = depthWriteEnabled;
				this.depthCompare = depthCompare;
				this.stencilFront = stencilFront;
				this.stencilBack = stencilBack;
				this.stencilReadMask = stencilReadMask;
				this.stencilWriteMask = stencilWriteMask;
				this.depthBias = depthBias;
				this.depthBiasSlopeScale = depthBiasSlopeScale;
				this.depthBiasClamp = depthBiasClamp;
			}
		}

		[CRepr]
		public struct ImageCopyBuffer {
			public ChainedStruct* nextInChain;
			public TextureDataLayout layout;
			public Buffer buffer;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, TextureDataLayout layout, Buffer buffer) {
				this.nextInChain = nextInChain;
				this.layout = layout;
				this.buffer = buffer;
			}
		}

		[CRepr]
		public struct ImageCopyTexture {
			public ChainedStruct* nextInChain;
			public Texture texture;
			public uint32 mipLevel;
			public Origin3D origin;
			public TextureAspect aspect;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, Texture texture, uint32 mipLevel, Origin3D origin, TextureAspect aspect) {
				this.nextInChain = nextInChain;
				this.texture = texture;
				this.mipLevel = mipLevel;
				this.origin = origin;
				this.aspect = aspect;
			}
		}

		[CRepr]
		public struct ProgrammableStageDescriptor {
			public ChainedStruct* nextInChain;
			public ShaderModule module;
			public c_char* entryPoint;
			public uint32 constantCount;
			public ConstantEntry* constants;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, ShaderModule module, c_char* entryPoint, uint32 constantCount, ConstantEntry* constants) {
				this.nextInChain = nextInChain;
				this.module = module;
				this.entryPoint = entryPoint;
				this.constantCount = constantCount;
				this.constants = constants;
			}
		}

		[CRepr]
		public struct RenderPassColorAttachment {
			public TextureView view;
			public TextureView resolveTarget;
			public LoadOp loadOp;
			public StoreOp storeOp;
			public Color clearValue;

			public this() {
				this = default;
			}

			public this(TextureView view, TextureView resolveTarget, LoadOp loadOp, StoreOp storeOp, Color clearValue) {
				this.view = view;
				this.resolveTarget = resolveTarget;
				this.loadOp = loadOp;
				this.storeOp = storeOp;
				this.clearValue = clearValue;
			}
		}

		[CRepr]
		public struct RequiredLimits {
			public ChainedStruct* nextInChain;
			public Limits limits;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, Limits limits) {
				this.nextInChain = nextInChain;
				this.limits = limits;
			}
		}

		[CRepr]
		public struct ShaderModuleDescriptor {
			public ChainedStruct* nextInChain;
			public c_char* label;
			public uint32 hintCount;
			public ShaderModuleCompilationHint* hints;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, c_char* label, uint32 hintCount, ShaderModuleCompilationHint* hints) {
				this.nextInChain = nextInChain;
				this.label = label;
				this.hintCount = hintCount;
				this.hints = hints;
			}
		}

		[CRepr]
		public struct SupportedLimits {
			public ChainedStructOut* nextInChain;
			public Limits limits;

			public this() {
				this = default;
			}

			public this(ChainedStructOut* nextInChain, Limits limits) {
				this.nextInChain = nextInChain;
				this.limits = limits;
			}
		}

		[CRepr]
		public struct TextureDescriptor {
			public ChainedStruct* nextInChain;
			public c_char* label;
			public TextureUsage usage;
			public TextureDimension dimension;
			public Extent3D size;
			public TextureFormat format;
			public uint32 mipLevelCount;
			public uint32 sampleCount;
			public uint32 viewFormatCount;
			public TextureFormat* viewFormats;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, c_char* label, TextureUsage usage, TextureDimension dimension, Extent3D size, TextureFormat format, uint32 mipLevelCount, uint32 sampleCount, uint32 viewFormatCount, TextureFormat* viewFormats) {
				this.nextInChain = nextInChain;
				this.label = label;
				this.usage = usage;
				this.dimension = dimension;
				this.size = size;
				this.format = format;
				this.mipLevelCount = mipLevelCount;
				this.sampleCount = sampleCount;
				this.viewFormatCount = viewFormatCount;
				this.viewFormats = viewFormats;
			}
		}

		[CRepr]
		public struct VertexBufferLayout {
			public uint64 arrayStride;
			public VertexStepMode stepMode;
			public uint32 attributeCount;
			public VertexAttribute* attributes;

			public this() {
				this = default;
			}

			public this(uint64 arrayStride, VertexStepMode stepMode, uint32 attributeCount, VertexAttribute* attributes) {
				this.arrayStride = arrayStride;
				this.stepMode = stepMode;
				this.attributeCount = attributeCount;
				this.attributes = attributes;
			}
		}

		[CRepr]
		public struct BindGroupLayoutDescriptor {
			public ChainedStruct* nextInChain;
			public c_char* label;
			public uint32 entryCount;
			public BindGroupLayoutEntry* entries;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, c_char* label, uint32 entryCount, BindGroupLayoutEntry* entries) {
				this.nextInChain = nextInChain;
				this.label = label;
				this.entryCount = entryCount;
				this.entries = entries;
			}
		}

		[CRepr]
		public struct ColorTargetState {
			public ChainedStruct* nextInChain;
			public TextureFormat format;
			public BlendState* blend;
			public ColorWriteMask writeMask;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, TextureFormat format, BlendState* blend, ColorWriteMask writeMask) {
				this.nextInChain = nextInChain;
				this.format = format;
				this.blend = blend;
				this.writeMask = writeMask;
			}
		}

		[CRepr]
		public struct ComputePipelineDescriptor {
			public ChainedStruct* nextInChain;
			public c_char* label;
			public PipelineLayout layout;
			public ProgrammableStageDescriptor compute;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, c_char* label, PipelineLayout layout, ProgrammableStageDescriptor compute) {
				this.nextInChain = nextInChain;
				this.label = label;
				this.layout = layout;
				this.compute = compute;
			}
		}

		[CRepr]
		public struct DeviceDescriptor {
			public ChainedStruct* nextInChain;
			public c_char* label;
			public uint32 requiredFeaturesCount;
			public FeatureName* requiredFeatures;
			public RequiredLimits* requiredLimits;
			public QueueDescriptor defaultQueue;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, c_char* label, uint32 requiredFeaturesCount, FeatureName* requiredFeatures, RequiredLimits* requiredLimits, QueueDescriptor defaultQueue) {
				this.nextInChain = nextInChain;
				this.label = label;
				this.requiredFeaturesCount = requiredFeaturesCount;
				this.requiredFeatures = requiredFeatures;
				this.requiredLimits = requiredLimits;
				this.defaultQueue = defaultQueue;
			}
		}

		[CRepr]
		public struct RenderPassDescriptor {
			public ChainedStruct* nextInChain;
			public c_char* label;
			public uint32 colorAttachmentCount;
			public RenderPassColorAttachment* colorAttachments;
			public RenderPassDepthStencilAttachment* depthStencilAttachment;
			public QuerySet occlusionQuerySet;
			public uint32 timestampWriteCount;
			public RenderPassTimestampWrite* timestampWrites;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, c_char* label, uint32 colorAttachmentCount, RenderPassColorAttachment* colorAttachments, RenderPassDepthStencilAttachment* depthStencilAttachment, QuerySet occlusionQuerySet, uint32 timestampWriteCount, RenderPassTimestampWrite* timestampWrites) {
				this.nextInChain = nextInChain;
				this.label = label;
				this.colorAttachmentCount = colorAttachmentCount;
				this.colorAttachments = colorAttachments;
				this.depthStencilAttachment = depthStencilAttachment;
				this.occlusionQuerySet = occlusionQuerySet;
				this.timestampWriteCount = timestampWriteCount;
				this.timestampWrites = timestampWrites;
			}
		}

		[CRepr]
		public struct VertexState {
			public ChainedStruct* nextInChain;
			public ShaderModule module;
			public c_char* entryPoint;
			public uint32 constantCount;
			public ConstantEntry* constants;
			public uint32 bufferCount;
			public VertexBufferLayout* buffers;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, ShaderModule module, c_char* entryPoint, uint32 constantCount, ConstantEntry* constants, uint32 bufferCount, VertexBufferLayout* buffers) {
				this.nextInChain = nextInChain;
				this.module = module;
				this.entryPoint = entryPoint;
				this.constantCount = constantCount;
				this.constants = constants;
				this.bufferCount = bufferCount;
				this.buffers = buffers;
			}
		}

		[CRepr]
		public struct FragmentState {
			public ChainedStruct* nextInChain;
			public ShaderModule module;
			public c_char* entryPoint;
			public uint32 constantCount;
			public ConstantEntry* constants;
			public uint32 targetCount;
			public ColorTargetState* targets;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, ShaderModule module, c_char* entryPoint, uint32 constantCount, ConstantEntry* constants, uint32 targetCount, ColorTargetState* targets) {
				this.nextInChain = nextInChain;
				this.module = module;
				this.entryPoint = entryPoint;
				this.constantCount = constantCount;
				this.constants = constants;
				this.targetCount = targetCount;
				this.targets = targets;
			}
		}

		[CRepr]
		public struct RenderPipelineDescriptor {
			public ChainedStruct* nextInChain;
			public c_char* label;
			public PipelineLayout layout;
			public VertexState vertex;
			public PrimitiveState primitive;
			public DepthStencilState* depthStencil;
			public MultisampleState multisample;
			public FragmentState* fragment;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, c_char* label, PipelineLayout layout, VertexState vertex, PrimitiveState primitive, DepthStencilState* depthStencil, MultisampleState multisample, FragmentState* fragment) {
				this.nextInChain = nextInChain;
				this.label = label;
				this.layout = layout;
				this.vertex = vertex;
				this.primitive = primitive;
				this.depthStencil = depthStencil;
				this.multisample = multisample;
				this.fragment = fragment;
			}
		}

		[CRepr]
		public struct AdapterExtras {
			public ChainedStruct chain;
			public BackendType backend;

			public this() {
				this = default;
			}

			public this(ChainedStruct chain, BackendType backend) {
				this.chain = chain;
				this.backend = backend;
			}
		}

		[CRepr]
		public struct DeviceExtras {
			public ChainedStruct chain;
			public c_char* tracePath;

			public this() {
				this = default;
			}

			public this(ChainedStruct chain, c_char* tracePath) {
				this.chain = chain;
				this.tracePath = tracePath;
			}
		}

		[CRepr]
		public struct RequiredLimitsExtras {
			public ChainedStruct chain;
			public uint32 maxPushConstantSize;
			public uint64 maxBufferSize;

			public this() {
				this = default;
			}

			public this(ChainedStruct chain, uint32 maxPushConstantSize, uint64 maxBufferSize) {
				this.chain = chain;
				this.maxPushConstantSize = maxPushConstantSize;
				this.maxBufferSize = maxBufferSize;
			}
		}

		[CRepr]
		public struct SupportedLimitsExtras {
			public ChainedStructOut chain;
			public uint32 maxPushConstantSize;
			public uint64 maxBufferSize;

			public this() {
				this = default;
			}

			public this(ChainedStructOut chain, uint32 maxPushConstantSize, uint64 maxBufferSize) {
				this.chain = chain;
				this.maxPushConstantSize = maxPushConstantSize;
				this.maxBufferSize = maxBufferSize;
			}
		}

		[CRepr]
		public struct PushConstantRange {
			public ShaderStage stages;
			public uint32 start;
			public uint32 end;

			public this() {
				this = default;
			}

			public this(ShaderStage stages, uint32 start, uint32 end) {
				this.stages = stages;
				this.start = start;
				this.end = end;
			}
		}

		[CRepr]
		public struct PipelineLayoutExtras {
			public ChainedStruct chain;
			public uint32 pushConstantRangeCount;
			public PushConstantRange* pushConstantRanges;

			public this() {
				this = default;
			}

			public this(ChainedStruct chain, uint32 pushConstantRangeCount, PushConstantRange* pushConstantRanges) {
				this.chain = chain;
				this.pushConstantRangeCount = pushConstantRangeCount;
				this.pushConstantRanges = pushConstantRanges;
			}
		}

		[CRepr]
		public struct WrappedSubmissionIndex {
			public Queue queue;
			public SubmissionIndex submissionIndex;

			public this() {
				this = default;
			}

			public this(Queue queue, SubmissionIndex submissionIndex) {
				this.queue = queue;
				this.submissionIndex = submissionIndex;
			}
		}

		[CRepr]
		public struct ShaderDefine {
			public c_char* name;
			public c_char* value;

			public this() {
				this = default;
			}

			public this(c_char* name, c_char* value) {
				this.name = name;
				this.value = value;
			}
		}

		[CRepr]
		public struct ShaderModuleGLSLDescriptor {
			public ChainedStruct chain;
			public ShaderStage stage;
			public c_char* code;
			public uint32 defineCount;
			public ShaderDefine* defines;

			public this() {
				this = default;
			}

			public this(ChainedStruct chain, ShaderStage stage, c_char* code, uint32 defineCount, ShaderDefine* defines) {
				this.chain = chain;
				this.stage = stage;
				this.code = code;
				this.defineCount = defineCount;
				this.defines = defines;
			}
		}

		[CRepr]
		public struct StorageReport {
			public c_size numOccupied;
			public c_size numVacant;
			public c_size numError;
			public c_size elementSize;

			public this() {
				this = default;
			}

			public this(c_size numOccupied, c_size numVacant, c_size numError, c_size elementSize) {
				this.numOccupied = numOccupied;
				this.numVacant = numVacant;
				this.numError = numError;
				this.elementSize = elementSize;
			}
		}

		[CRepr]
		public struct HubReport {
			public StorageReport adapters;
			public StorageReport devices;
			public StorageReport pipelineLayouts;
			public StorageReport shaderModules;
			public StorageReport bindGroupLayouts;
			public StorageReport bindGroups;
			public StorageReport commandBuffers;
			public StorageReport renderBundles;
			public StorageReport renderPipelines;
			public StorageReport computePipelines;
			public StorageReport querySets;
			public StorageReport buffers;
			public StorageReport textures;
			public StorageReport textureViews;
			public StorageReport samplers;

			public this() {
				this = default;
			}

			public this(StorageReport adapters, StorageReport devices, StorageReport pipelineLayouts, StorageReport shaderModules, StorageReport bindGroupLayouts, StorageReport bindGroups, StorageReport commandBuffers, StorageReport renderBundles, StorageReport renderPipelines, StorageReport computePipelines, StorageReport querySets, StorageReport buffers, StorageReport textures, StorageReport textureViews, StorageReport samplers) {
				this.adapters = adapters;
				this.devices = devices;
				this.pipelineLayouts = pipelineLayouts;
				this.shaderModules = shaderModules;
				this.bindGroupLayouts = bindGroupLayouts;
				this.bindGroups = bindGroups;
				this.commandBuffers = commandBuffers;
				this.renderBundles = renderBundles;
				this.renderPipelines = renderPipelines;
				this.computePipelines = computePipelines;
				this.querySets = querySets;
				this.buffers = buffers;
				this.textures = textures;
				this.textureViews = textureViews;
				this.samplers = samplers;
			}
		}

		[CRepr]
		public struct GlobalReport {
			public StorageReport surfaces;
			public BackendType backendType;
			public HubReport vulkan;
			public HubReport metal;
			public HubReport dx12;
			public HubReport dx11;
			public HubReport gl;

			public this() {
				this = default;
			}

			public this(StorageReport surfaces, BackendType backendType, HubReport vulkan, HubReport metal, HubReport dx12, HubReport dx11, HubReport gl) {
				this.surfaces = surfaces;
				this.backendType = backendType;
				this.vulkan = vulkan;
				this.metal = metal;
				this.dx12 = dx12;
				this.dx11 = dx11;
				this.gl = gl;
			}
		}

		public function void BufferMapCallback(BufferMapAsyncStatus status, void* userdata);
		public function void CompilationInfoCallback(CompilationInfoRequestStatus status, CompilationInfo* compilationInfo, void* userdata);
		public function void CreateComputePipelineAsyncCallback(CreatePipelineAsyncStatus status, ComputePipeline pipeline, c_char* message, void* userdata);
		public function void CreateRenderPipelineAsyncCallback(CreatePipelineAsyncStatus status, RenderPipeline pipeline, c_char* message, void* userdata);
		public function void DeviceLostCallback(DeviceLostReason reason, c_char* message, void* userdata);
		public function void ErrorCallback(ErrorType type, c_char* message, void* userdata);
		public function void Proc();
		public function void QueueWorkDoneCallback(QueueWorkDoneStatus status, void* userdata);
		public function void RequestAdapterCallback(RequestAdapterStatus status, Adapter adapter, c_char* message, void* userdata);
		public function void RequestDeviceCallback(RequestDeviceStatus status, Device device, c_char* message, void* userdata);
		public function Instance ProcCreateInstance(InstanceDescriptor* descriptor);
		public function Proc ProcGetProcAddress(Device device, c_char* procName);
		public function c_size ProcAdapterEnumerateFeatures(Adapter adapter, FeatureName* features);
		public function c_bool ProcAdapterGetLimits(Adapter adapter, SupportedLimits* limits);
		public function void ProcAdapterGetProperties(Adapter adapter, AdapterProperties* properties);
		public function c_bool ProcAdapterHasFeature(Adapter adapter, FeatureName feature);
		public function void ProcAdapterRequestDevice(Adapter adapter, DeviceDescriptor* descriptor, RequestDeviceCallback callback, void* userdata);
		public function void ProcBindGroupSetLabel(BindGroup bindGroup, c_char* label);
		public function void ProcBindGroupLayoutSetLabel(BindGroupLayout bindGroupLayout, c_char* label);
		public function void ProcBufferDestroy(Buffer buffer);
		public function void* ProcBufferGetConstMappedRange(Buffer buffer, c_size offset, c_size size);
		public function void* ProcBufferGetMappedRange(Buffer buffer, c_size offset, c_size size);
		public function void ProcBufferMapAsync(Buffer buffer, MapMode mode, c_size offset, c_size size, BufferMapCallback callback, void* userdata);
		public function void ProcBufferSetLabel(Buffer buffer, c_char* label);
		public function void ProcBufferUnmap(Buffer buffer);
		public function void ProcCommandBufferSetLabel(CommandBuffer commandBuffer, c_char* label);
		public function ComputePassEncoder ProcCommandEncoderBeginComputePass(CommandEncoder commandEncoder, ComputePassDescriptor* descriptor);
		public function RenderPassEncoder ProcCommandEncoderBeginRenderPass(CommandEncoder commandEncoder, RenderPassDescriptor* descriptor);
		public function void ProcCommandEncoderClearBuffer(CommandEncoder commandEncoder, Buffer buffer, uint64 offset, uint64 size);
		public function void ProcCommandEncoderCopyBufferToBuffer(CommandEncoder commandEncoder, Buffer source, uint64 sourceOffset, Buffer destination, uint64 destinationOffset, uint64 size);
		public function void ProcCommandEncoderCopyBufferToTexture(CommandEncoder commandEncoder, ImageCopyBuffer* source, ImageCopyTexture* destination, Extent3D* copySize);
		public function void ProcCommandEncoderCopyTextureToBuffer(CommandEncoder commandEncoder, ImageCopyTexture* source, ImageCopyBuffer* destination, Extent3D* copySize);
		public function void ProcCommandEncoderCopyTextureToTexture(CommandEncoder commandEncoder, ImageCopyTexture* source, ImageCopyTexture* destination, Extent3D* copySize);
		public function CommandBuffer ProcCommandEncoderFinish(CommandEncoder commandEncoder, CommandBufferDescriptor* descriptor);
		public function void ProcCommandEncoderInsertDebugMarker(CommandEncoder commandEncoder, c_char* markerLabel);
		public function void ProcCommandEncoderPopDebugGroup(CommandEncoder commandEncoder);
		public function void ProcCommandEncoderPushDebugGroup(CommandEncoder commandEncoder, c_char* groupLabel);
		public function void ProcCommandEncoderResolveQuerySet(CommandEncoder commandEncoder, QuerySet querySet, uint32 firstQuery, uint32 queryCount, Buffer destination, uint64 destinationOffset);
		public function void ProcCommandEncoderSetLabel(CommandEncoder commandEncoder, c_char* label);
		public function void ProcCommandEncoderWriteTimestamp(CommandEncoder commandEncoder, QuerySet querySet, uint32 queryIndex);
		public function void ProcComputePassEncoderBeginPipelineStatisticsQuery(ComputePassEncoder computePassEncoder, QuerySet querySet, uint32 queryIndex);
		public function void ProcComputePassEncoderDispatchWorkgroups(ComputePassEncoder computePassEncoder, uint32 workgroupCountX, uint32 workgroupCountY, uint32 workgroupCountZ);
		public function void ProcComputePassEncoderDispatchWorkgroupsIndirect(ComputePassEncoder computePassEncoder, Buffer indirectBuffer, uint64 indirectOffset);
		public function void ProcComputePassEncoderEnd(ComputePassEncoder computePassEncoder);
		public function void ProcComputePassEncoderEndPipelineStatisticsQuery(ComputePassEncoder computePassEncoder);
		public function void ProcComputePassEncoderInsertDebugMarker(ComputePassEncoder computePassEncoder, c_char* markerLabel);
		public function void ProcComputePassEncoderPopDebugGroup(ComputePassEncoder computePassEncoder);
		public function void ProcComputePassEncoderPushDebugGroup(ComputePassEncoder computePassEncoder, c_char* groupLabel);
		public function void ProcComputePassEncoderSetBindGroup(ComputePassEncoder computePassEncoder, uint32 groupIndex, BindGroup group, uint32 dynamicOffsetCount, uint32* dynamicOffsets);
		public function void ProcComputePassEncoderSetLabel(ComputePassEncoder computePassEncoder, c_char* label);
		public function void ProcComputePassEncoderSetPipeline(ComputePassEncoder computePassEncoder, ComputePipeline pipeline);
		public function BindGroupLayout ProcComputePipelineGetBindGroupLayout(ComputePipeline computePipeline, uint32 groupIndex);
		public function void ProcComputePipelineSetLabel(ComputePipeline computePipeline, c_char* label);
		public function BindGroup ProcDeviceCreateBindGroup(Device device, BindGroupDescriptor* descriptor);
		public function BindGroupLayout ProcDeviceCreateBindGroupLayout(Device device, BindGroupLayoutDescriptor* descriptor);
		public function Buffer ProcDeviceCreateBuffer(Device device, BufferDescriptor* descriptor);
		public function CommandEncoder ProcDeviceCreateCommandEncoder(Device device, CommandEncoderDescriptor* descriptor);
		public function ComputePipeline ProcDeviceCreateComputePipeline(Device device, ComputePipelineDescriptor* descriptor);
		public function void ProcDeviceCreateComputePipelineAsync(Device device, ComputePipelineDescriptor* descriptor, CreateComputePipelineAsyncCallback callback, void* userdata);
		public function PipelineLayout ProcDeviceCreatePipelineLayout(Device device, PipelineLayoutDescriptor* descriptor);
		public function QuerySet ProcDeviceCreateQuerySet(Device device, QuerySetDescriptor* descriptor);
		public function RenderBundleEncoder ProcDeviceCreateRenderBundleEncoder(Device device, RenderBundleEncoderDescriptor* descriptor);
		public function RenderPipeline ProcDeviceCreateRenderPipeline(Device device, RenderPipelineDescriptor* descriptor);
		public function void ProcDeviceCreateRenderPipelineAsync(Device device, RenderPipelineDescriptor* descriptor, CreateRenderPipelineAsyncCallback callback, void* userdata);
		public function Sampler ProcDeviceCreateSampler(Device device, SamplerDescriptor* descriptor);
		public function ShaderModule ProcDeviceCreateShaderModule(Device device, ShaderModuleDescriptor* descriptor);
		public function SwapChain ProcDeviceCreateSwapChain(Device device, Surface surface, SwapChainDescriptor* descriptor);
		public function Texture ProcDeviceCreateTexture(Device device, TextureDescriptor* descriptor);
		public function void ProcDeviceDestroy(Device device);
		public function c_size ProcDeviceEnumerateFeatures(Device device, FeatureName* features);
		public function c_bool ProcDeviceGetLimits(Device device, SupportedLimits* limits);
		public function Queue ProcDeviceGetQueue(Device device);
		public function c_bool ProcDeviceHasFeature(Device device, FeatureName feature);
		public function c_bool ProcDevicePopErrorScope(Device device, ErrorCallback callback, void* userdata);
		public function void ProcDevicePushErrorScope(Device device, ErrorFilter filter);
		public function void ProcDeviceSetDeviceLostCallback(Device device, DeviceLostCallback callback, void* userdata);
		public function void ProcDeviceSetLabel(Device device, c_char* label);
		public function void ProcDeviceSetUncapturedErrorCallback(Device device, ErrorCallback callback, void* userdata);
		public function Surface ProcInstanceCreateSurface(Instance instance, SurfaceDescriptor* descriptor);
		public function void ProcInstanceProcessEvents(Instance instance);
		public function void ProcInstanceRequestAdapter(Instance instance, RequestAdapterOptions* options, RequestAdapterCallback callback, void* userdata);
		public function void ProcPipelineLayoutSetLabel(PipelineLayout pipelineLayout, c_char* label);
		public function void ProcQuerySetDestroy(QuerySet querySet);
		public function void ProcQuerySetSetLabel(QuerySet querySet, c_char* label);
		public function void ProcQueueOnSubmittedWorkDone(Queue queue, QueueWorkDoneCallback callback, void* userdata);
		public function void ProcQueueSetLabel(Queue queue, c_char* label);
		public function void ProcQueueSubmit(Queue queue, uint32 commandCount, CommandBuffer* commands);
		public function void ProcQueueWriteBuffer(Queue queue, Buffer buffer, uint64 bufferOffset, void* data, c_size size);
		public function void ProcQueueWriteTexture(Queue queue, ImageCopyTexture* destination, void* data, c_size dataSize, TextureDataLayout* dataLayout, Extent3D* writeSize);
		public function void ProcRenderBundleEncoderDraw(RenderBundleEncoder renderBundleEncoder, uint32 vertexCount, uint32 instanceCount, uint32 firstVertex, uint32 firstInstance);
		public function void ProcRenderBundleEncoderDrawIndexed(RenderBundleEncoder renderBundleEncoder, uint32 indexCount, uint32 instanceCount, uint32 firstIndex, int32 baseVertex, uint32 firstInstance);
		public function void ProcRenderBundleEncoderDrawIndexedIndirect(RenderBundleEncoder renderBundleEncoder, Buffer indirectBuffer, uint64 indirectOffset);
		public function void ProcRenderBundleEncoderDrawIndirect(RenderBundleEncoder renderBundleEncoder, Buffer indirectBuffer, uint64 indirectOffset);
		public function RenderBundle ProcRenderBundleEncoderFinish(RenderBundleEncoder renderBundleEncoder, RenderBundleDescriptor* descriptor);
		public function void ProcRenderBundleEncoderInsertDebugMarker(RenderBundleEncoder renderBundleEncoder, c_char* markerLabel);
		public function void ProcRenderBundleEncoderPopDebugGroup(RenderBundleEncoder renderBundleEncoder);
		public function void ProcRenderBundleEncoderPushDebugGroup(RenderBundleEncoder renderBundleEncoder, c_char* groupLabel);
		public function void ProcRenderBundleEncoderSetBindGroup(RenderBundleEncoder renderBundleEncoder, uint32 groupIndex, BindGroup group, uint32 dynamicOffsetCount, uint32* dynamicOffsets);
		public function void ProcRenderBundleEncoderSetIndexBuffer(RenderBundleEncoder renderBundleEncoder, Buffer buffer, IndexFormat format, uint64 offset, uint64 size);
		public function void ProcRenderBundleEncoderSetLabel(RenderBundleEncoder renderBundleEncoder, c_char* label);
		public function void ProcRenderBundleEncoderSetPipeline(RenderBundleEncoder renderBundleEncoder, RenderPipeline pipeline);
		public function void ProcRenderBundleEncoderSetVertexBuffer(RenderBundleEncoder renderBundleEncoder, uint32 slot, Buffer buffer, uint64 offset, uint64 size);
		public function void ProcRenderPassEncoderBeginOcclusionQuery(RenderPassEncoder renderPassEncoder, uint32 queryIndex);
		public function void ProcRenderPassEncoderBeginPipelineStatisticsQuery(RenderPassEncoder renderPassEncoder, QuerySet querySet, uint32 queryIndex);
		public function void ProcRenderPassEncoderDraw(RenderPassEncoder renderPassEncoder, uint32 vertexCount, uint32 instanceCount, uint32 firstVertex, uint32 firstInstance);
		public function void ProcRenderPassEncoderDrawIndexed(RenderPassEncoder renderPassEncoder, uint32 indexCount, uint32 instanceCount, uint32 firstIndex, int32 baseVertex, uint32 firstInstance);
		public function void ProcRenderPassEncoderDrawIndexedIndirect(RenderPassEncoder renderPassEncoder, Buffer indirectBuffer, uint64 indirectOffset);
		public function void ProcRenderPassEncoderDrawIndirect(RenderPassEncoder renderPassEncoder, Buffer indirectBuffer, uint64 indirectOffset);
		public function void ProcRenderPassEncoderEnd(RenderPassEncoder renderPassEncoder);
		public function void ProcRenderPassEncoderEndOcclusionQuery(RenderPassEncoder renderPassEncoder);
		public function void ProcRenderPassEncoderEndPipelineStatisticsQuery(RenderPassEncoder renderPassEncoder);
		public function void ProcRenderPassEncoderExecuteBundles(RenderPassEncoder renderPassEncoder, uint32 bundlesCount, RenderBundle* bundles);
		public function void ProcRenderPassEncoderInsertDebugMarker(RenderPassEncoder renderPassEncoder, c_char* markerLabel);
		public function void ProcRenderPassEncoderPopDebugGroup(RenderPassEncoder renderPassEncoder);
		public function void ProcRenderPassEncoderPushDebugGroup(RenderPassEncoder renderPassEncoder, c_char* groupLabel);
		public function void ProcRenderPassEncoderSetBindGroup(RenderPassEncoder renderPassEncoder, uint32 groupIndex, BindGroup group, uint32 dynamicOffsetCount, uint32* dynamicOffsets);
		public function void ProcRenderPassEncoderSetBlendConstant(RenderPassEncoder renderPassEncoder, Color* color);
		public function void ProcRenderPassEncoderSetIndexBuffer(RenderPassEncoder renderPassEncoder, Buffer buffer, IndexFormat format, uint64 offset, uint64 size);
		public function void ProcRenderPassEncoderSetLabel(RenderPassEncoder renderPassEncoder, c_char* label);
		public function void ProcRenderPassEncoderSetPipeline(RenderPassEncoder renderPassEncoder, RenderPipeline pipeline);
		public function void ProcRenderPassEncoderSetScissorRect(RenderPassEncoder renderPassEncoder, uint32 x, uint32 y, uint32 width, uint32 height);
		public function void ProcRenderPassEncoderSetStencilReference(RenderPassEncoder renderPassEncoder, uint32 reference);
		public function void ProcRenderPassEncoderSetVertexBuffer(RenderPassEncoder renderPassEncoder, uint32 slot, Buffer buffer, uint64 offset, uint64 size);
		public function void ProcRenderPassEncoderSetViewport(RenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth);
		public function BindGroupLayout ProcRenderPipelineGetBindGroupLayout(RenderPipeline renderPipeline, uint32 groupIndex);
		public function void ProcRenderPipelineSetLabel(RenderPipeline renderPipeline, c_char* label);
		public function void ProcSamplerSetLabel(Sampler sampler, c_char* label);
		public function void ProcShaderModuleGetCompilationInfo(ShaderModule shaderModule, CompilationInfoCallback callback, void* userdata);
		public function void ProcShaderModuleSetLabel(ShaderModule shaderModule, c_char* label);
		public function TextureFormat ProcSurfaceGetPreferredFormat(Surface surface, Adapter adapter);
		public function TextureView ProcSwapChainGetCurrentTextureView(SwapChain swapChain);
		public function void ProcSwapChainPresent(SwapChain swapChain);
		public function TextureView ProcTextureCreateView(Texture texture, TextureViewDescriptor* descriptor);
		public function void ProcTextureDestroy(Texture texture);
		public function void ProcTextureSetLabel(Texture texture, c_char* label);
		public function void ProcTextureViewSetLabel(TextureView textureView, c_char* label);
		public typealias SubmissionIndex = uint64;
		public function void LogCallback(LogLevel level, c_char* msg);

		[LinkName("wgpuCreateInstance")]
		public static extern Instance CreateInstance(InstanceDescriptor* descriptor);

		[LinkName("wgpuGetProcAddress")]
		public static extern Proc GetProcAddress(Device device, c_char* procName);

		[LinkName("wgpuAdapterEnumerateFeatures")]
		public static extern c_size AdapterEnumerateFeatures(Adapter adapter, FeatureName* features);

		[LinkName("wgpuAdapterGetLimits")]
		public static extern c_bool AdapterGetLimits(Adapter adapter, SupportedLimits* limits);

		[LinkName("wgpuAdapterGetProperties")]
		public static extern void AdapterGetProperties(Adapter adapter, AdapterProperties* properties);

		[LinkName("wgpuAdapterHasFeature")]
		public static extern c_bool AdapterHasFeature(Adapter adapter, FeatureName feature);

		[LinkName("wgpuAdapterRequestDevice")]
		public static extern void AdapterRequestDevice(Adapter adapter, DeviceDescriptor* descriptor, RequestDeviceCallback callback, void* userdata);

		[LinkName("wgpuBindGroupSetLabel")]
		public static extern void BindGroupSetLabel(BindGroup bindGroup, c_char* label);

		[LinkName("wgpuBindGroupLayoutSetLabel")]
		public static extern void BindGroupLayoutSetLabel(BindGroupLayout bindGroupLayout, c_char* label);

		[LinkName("wgpuBufferDestroy")]
		public static extern void BufferDestroy(Buffer buffer);

		[LinkName("wgpuBufferGetConstMappedRange")]
		public static extern void* BufferGetConstMappedRange(Buffer buffer, c_size offset, c_size size);

		[LinkName("wgpuBufferGetMappedRange")]
		public static extern void* BufferGetMappedRange(Buffer buffer, c_size offset, c_size size);

		[LinkName("wgpuBufferMapAsync")]
		public static extern void BufferMapAsync(Buffer buffer, MapMode mode, c_size offset, c_size size, BufferMapCallback callback, void* userdata);

		[LinkName("wgpuBufferSetLabel")]
		public static extern void BufferSetLabel(Buffer buffer, c_char* label);

		[LinkName("wgpuBufferUnmap")]
		public static extern void BufferUnmap(Buffer buffer);

		[LinkName("wgpuCommandBufferSetLabel")]
		public static extern void CommandBufferSetLabel(CommandBuffer commandBuffer, c_char* label);

		[LinkName("wgpuCommandEncoderBeginComputePass")]
		public static extern ComputePassEncoder CommandEncoderBeginComputePass(CommandEncoder commandEncoder, ComputePassDescriptor* descriptor);

		[LinkName("wgpuCommandEncoderBeginRenderPass")]
		public static extern RenderPassEncoder CommandEncoderBeginRenderPass(CommandEncoder commandEncoder, RenderPassDescriptor* descriptor);

		[LinkName("wgpuCommandEncoderClearBuffer")]
		public static extern void CommandEncoderClearBuffer(CommandEncoder commandEncoder, Buffer buffer, uint64 offset, uint64 size);

		[LinkName("wgpuCommandEncoderCopyBufferToBuffer")]
		public static extern void CommandEncoderCopyBufferToBuffer(CommandEncoder commandEncoder, Buffer source, uint64 sourceOffset, Buffer destination, uint64 destinationOffset, uint64 size);

		[LinkName("wgpuCommandEncoderCopyBufferToTexture")]
		public static extern void CommandEncoderCopyBufferToTexture(CommandEncoder commandEncoder, ImageCopyBuffer* source, ImageCopyTexture* destination, Extent3D* copySize);

		[LinkName("wgpuCommandEncoderCopyTextureToBuffer")]
		public static extern void CommandEncoderCopyTextureToBuffer(CommandEncoder commandEncoder, ImageCopyTexture* source, ImageCopyBuffer* destination, Extent3D* copySize);

		[LinkName("wgpuCommandEncoderCopyTextureToTexture")]
		public static extern void CommandEncoderCopyTextureToTexture(CommandEncoder commandEncoder, ImageCopyTexture* source, ImageCopyTexture* destination, Extent3D* copySize);

		[LinkName("wgpuCommandEncoderFinish")]
		public static extern CommandBuffer CommandEncoderFinish(CommandEncoder commandEncoder, CommandBufferDescriptor* descriptor);

		[LinkName("wgpuCommandEncoderInsertDebugMarker")]
		public static extern void CommandEncoderInsertDebugMarker(CommandEncoder commandEncoder, c_char* markerLabel);

		[LinkName("wgpuCommandEncoderPopDebugGroup")]
		public static extern void CommandEncoderPopDebugGroup(CommandEncoder commandEncoder);

		[LinkName("wgpuCommandEncoderPushDebugGroup")]
		public static extern void CommandEncoderPushDebugGroup(CommandEncoder commandEncoder, c_char* groupLabel);

		[LinkName("wgpuCommandEncoderResolveQuerySet")]
		public static extern void CommandEncoderResolveQuerySet(CommandEncoder commandEncoder, QuerySet querySet, uint32 firstQuery, uint32 queryCount, Buffer destination, uint64 destinationOffset);

		[LinkName("wgpuCommandEncoderSetLabel")]
		public static extern void CommandEncoderSetLabel(CommandEncoder commandEncoder, c_char* label);

		[LinkName("wgpuCommandEncoderWriteTimestamp")]
		public static extern void CommandEncoderWriteTimestamp(CommandEncoder commandEncoder, QuerySet querySet, uint32 queryIndex);

		[LinkName("wgpuComputePassEncoderBeginPipelineStatisticsQuery")]
		public static extern void ComputePassEncoderBeginPipelineStatisticsQuery(ComputePassEncoder computePassEncoder, QuerySet querySet, uint32 queryIndex);

		[LinkName("wgpuComputePassEncoderDispatchWorkgroups")]
		public static extern void ComputePassEncoderDispatchWorkgroups(ComputePassEncoder computePassEncoder, uint32 workgroupCountX, uint32 workgroupCountY, uint32 workgroupCountZ);

		[LinkName("wgpuComputePassEncoderDispatchWorkgroupsIndirect")]
		public static extern void ComputePassEncoderDispatchWorkgroupsIndirect(ComputePassEncoder computePassEncoder, Buffer indirectBuffer, uint64 indirectOffset);

		[LinkName("wgpuComputePassEncoderEnd")]
		public static extern void ComputePassEncoderEnd(ComputePassEncoder computePassEncoder);

		[LinkName("wgpuComputePassEncoderEndPipelineStatisticsQuery")]
		public static extern void ComputePassEncoderEndPipelineStatisticsQuery(ComputePassEncoder computePassEncoder);

		[LinkName("wgpuComputePassEncoderInsertDebugMarker")]
		public static extern void ComputePassEncoderInsertDebugMarker(ComputePassEncoder computePassEncoder, c_char* markerLabel);

		[LinkName("wgpuComputePassEncoderPopDebugGroup")]
		public static extern void ComputePassEncoderPopDebugGroup(ComputePassEncoder computePassEncoder);

		[LinkName("wgpuComputePassEncoderPushDebugGroup")]
		public static extern void ComputePassEncoderPushDebugGroup(ComputePassEncoder computePassEncoder, c_char* groupLabel);

		[LinkName("wgpuComputePassEncoderSetBindGroup")]
		public static extern void ComputePassEncoderSetBindGroup(ComputePassEncoder computePassEncoder, uint32 groupIndex, BindGroup group, uint32 dynamicOffsetCount, uint32* dynamicOffsets);

		[LinkName("wgpuComputePassEncoderSetLabel")]
		public static extern void ComputePassEncoderSetLabel(ComputePassEncoder computePassEncoder, c_char* label);

		[LinkName("wgpuComputePassEncoderSetPipeline")]
		public static extern void ComputePassEncoderSetPipeline(ComputePassEncoder computePassEncoder, ComputePipeline pipeline);

		[LinkName("wgpuComputePipelineGetBindGroupLayout")]
		public static extern BindGroupLayout ComputePipelineGetBindGroupLayout(ComputePipeline computePipeline, uint32 groupIndex);

		[LinkName("wgpuComputePipelineSetLabel")]
		public static extern void ComputePipelineSetLabel(ComputePipeline computePipeline, c_char* label);

		[LinkName("wgpuDeviceCreateBindGroup")]
		public static extern BindGroup DeviceCreateBindGroup(Device device, BindGroupDescriptor* descriptor);

		[LinkName("wgpuDeviceCreateBindGroupLayout")]
		public static extern BindGroupLayout DeviceCreateBindGroupLayout(Device device, BindGroupLayoutDescriptor* descriptor);

		[LinkName("wgpuDeviceCreateBuffer")]
		public static extern Buffer DeviceCreateBuffer(Device device, BufferDescriptor* descriptor);

		[LinkName("wgpuDeviceCreateCommandEncoder")]
		public static extern CommandEncoder DeviceCreateCommandEncoder(Device device, CommandEncoderDescriptor* descriptor);

		[LinkName("wgpuDeviceCreateComputePipeline")]
		public static extern ComputePipeline DeviceCreateComputePipeline(Device device, ComputePipelineDescriptor* descriptor);

		[LinkName("wgpuDeviceCreateComputePipelineAsync")]
		public static extern void DeviceCreateComputePipelineAsync(Device device, ComputePipelineDescriptor* descriptor, CreateComputePipelineAsyncCallback callback, void* userdata);

		[LinkName("wgpuDeviceCreatePipelineLayout")]
		public static extern PipelineLayout DeviceCreatePipelineLayout(Device device, PipelineLayoutDescriptor* descriptor);

		[LinkName("wgpuDeviceCreateQuerySet")]
		public static extern QuerySet DeviceCreateQuerySet(Device device, QuerySetDescriptor* descriptor);

		[LinkName("wgpuDeviceCreateRenderBundleEncoder")]
		public static extern RenderBundleEncoder DeviceCreateRenderBundleEncoder(Device device, RenderBundleEncoderDescriptor* descriptor);

		[LinkName("wgpuDeviceCreateRenderPipeline")]
		public static extern RenderPipeline DeviceCreateRenderPipeline(Device device, RenderPipelineDescriptor* descriptor);

		[LinkName("wgpuDeviceCreateRenderPipelineAsync")]
		public static extern void DeviceCreateRenderPipelineAsync(Device device, RenderPipelineDescriptor* descriptor, CreateRenderPipelineAsyncCallback callback, void* userdata);

		[LinkName("wgpuDeviceCreateSampler")]
		public static extern Sampler DeviceCreateSampler(Device device, SamplerDescriptor* descriptor);

		[LinkName("wgpuDeviceCreateShaderModule")]
		public static extern ShaderModule DeviceCreateShaderModule(Device device, ShaderModuleDescriptor* descriptor);

		[LinkName("wgpuDeviceCreateSwapChain")]
		public static extern SwapChain DeviceCreateSwapChain(Device device, Surface surface, SwapChainDescriptor* descriptor);

		[LinkName("wgpuDeviceCreateTexture")]
		public static extern Texture DeviceCreateTexture(Device device, TextureDescriptor* descriptor);

		[LinkName("wgpuDeviceDestroy")]
		public static extern void DeviceDestroy(Device device);

		[LinkName("wgpuDeviceEnumerateFeatures")]
		public static extern c_size DeviceEnumerateFeatures(Device device, FeatureName* features);

		[LinkName("wgpuDeviceGetLimits")]
		public static extern c_bool DeviceGetLimits(Device device, SupportedLimits* limits);

		[LinkName("wgpuDeviceGetQueue")]
		public static extern Queue DeviceGetQueue(Device device);

		[LinkName("wgpuDeviceHasFeature")]
		public static extern c_bool DeviceHasFeature(Device device, FeatureName feature);

		[LinkName("wgpuDevicePopErrorScope")]
		public static extern c_bool DevicePopErrorScope(Device device, ErrorCallback callback, void* userdata);

		[LinkName("wgpuDevicePushErrorScope")]
		public static extern void DevicePushErrorScope(Device device, ErrorFilter filter);

		[LinkName("wgpuDeviceSetDeviceLostCallback")]
		public static extern void DeviceSetDeviceLostCallback(Device device, DeviceLostCallback callback, void* userdata);

		[LinkName("wgpuDeviceSetLabel")]
		public static extern void DeviceSetLabel(Device device, c_char* label);

		[LinkName("wgpuDeviceSetUncapturedErrorCallback")]
		public static extern void DeviceSetUncapturedErrorCallback(Device device, ErrorCallback callback, void* userdata);

		[LinkName("wgpuInstanceCreateSurface")]
		public static extern Surface InstanceCreateSurface(Instance instance, SurfaceDescriptor* descriptor);

		[LinkName("wgpuInstanceProcessEvents")]
		public static extern void InstanceProcessEvents(Instance instance);

		[LinkName("wgpuInstanceRequestAdapter")]
		public static extern void InstanceRequestAdapter(Instance instance, RequestAdapterOptions* options, RequestAdapterCallback callback, void* userdata);

		[LinkName("wgpuPipelineLayoutSetLabel")]
		public static extern void PipelineLayoutSetLabel(PipelineLayout pipelineLayout, c_char* label);

		[LinkName("wgpuQuerySetDestroy")]
		public static extern void QuerySetDestroy(QuerySet querySet);

		[LinkName("wgpuQuerySetSetLabel")]
		public static extern void QuerySetSetLabel(QuerySet querySet, c_char* label);

		[LinkName("wgpuQueueOnSubmittedWorkDone")]
		public static extern void QueueOnSubmittedWorkDone(Queue queue, QueueWorkDoneCallback callback, void* userdata);

		[LinkName("wgpuQueueSetLabel")]
		public static extern void QueueSetLabel(Queue queue, c_char* label);

		[LinkName("wgpuQueueSubmit")]
		public static extern void QueueSubmit(Queue queue, uint32 commandCount, CommandBuffer* commands);

		[LinkName("wgpuQueueWriteBuffer")]
		public static extern void QueueWriteBuffer(Queue queue, Buffer buffer, uint64 bufferOffset, void* data, c_size size);

		[LinkName("wgpuQueueWriteTexture")]
		public static extern void QueueWriteTexture(Queue queue, ImageCopyTexture* destination, void* data, c_size dataSize, TextureDataLayout* dataLayout, Extent3D* writeSize);

		[LinkName("wgpuRenderBundleEncoderDraw")]
		public static extern void RenderBundleEncoderDraw(RenderBundleEncoder renderBundleEncoder, uint32 vertexCount, uint32 instanceCount, uint32 firstVertex, uint32 firstInstance);

		[LinkName("wgpuRenderBundleEncoderDrawIndexed")]
		public static extern void RenderBundleEncoderDrawIndexed(RenderBundleEncoder renderBundleEncoder, uint32 indexCount, uint32 instanceCount, uint32 firstIndex, int32 baseVertex, uint32 firstInstance);

		[LinkName("wgpuRenderBundleEncoderDrawIndexedIndirect")]
		public static extern void RenderBundleEncoderDrawIndexedIndirect(RenderBundleEncoder renderBundleEncoder, Buffer indirectBuffer, uint64 indirectOffset);

		[LinkName("wgpuRenderBundleEncoderDrawIndirect")]
		public static extern void RenderBundleEncoderDrawIndirect(RenderBundleEncoder renderBundleEncoder, Buffer indirectBuffer, uint64 indirectOffset);

		[LinkName("wgpuRenderBundleEncoderFinish")]
		public static extern RenderBundle RenderBundleEncoderFinish(RenderBundleEncoder renderBundleEncoder, RenderBundleDescriptor* descriptor);

		[LinkName("wgpuRenderBundleEncoderInsertDebugMarker")]
		public static extern void RenderBundleEncoderInsertDebugMarker(RenderBundleEncoder renderBundleEncoder, c_char* markerLabel);

		[LinkName("wgpuRenderBundleEncoderPopDebugGroup")]
		public static extern void RenderBundleEncoderPopDebugGroup(RenderBundleEncoder renderBundleEncoder);

		[LinkName("wgpuRenderBundleEncoderPushDebugGroup")]
		public static extern void RenderBundleEncoderPushDebugGroup(RenderBundleEncoder renderBundleEncoder, c_char* groupLabel);

		[LinkName("wgpuRenderBundleEncoderSetBindGroup")]
		public static extern void RenderBundleEncoderSetBindGroup(RenderBundleEncoder renderBundleEncoder, uint32 groupIndex, BindGroup group, uint32 dynamicOffsetCount, uint32* dynamicOffsets);

		[LinkName("wgpuRenderBundleEncoderSetIndexBuffer")]
		public static extern void RenderBundleEncoderSetIndexBuffer(RenderBundleEncoder renderBundleEncoder, Buffer buffer, IndexFormat format, uint64 offset, uint64 size);

		[LinkName("wgpuRenderBundleEncoderSetLabel")]
		public static extern void RenderBundleEncoderSetLabel(RenderBundleEncoder renderBundleEncoder, c_char* label);

		[LinkName("wgpuRenderBundleEncoderSetPipeline")]
		public static extern void RenderBundleEncoderSetPipeline(RenderBundleEncoder renderBundleEncoder, RenderPipeline pipeline);

		[LinkName("wgpuRenderBundleEncoderSetVertexBuffer")]
		public static extern void RenderBundleEncoderSetVertexBuffer(RenderBundleEncoder renderBundleEncoder, uint32 slot, Buffer buffer, uint64 offset, uint64 size);

		[LinkName("wgpuRenderPassEncoderBeginOcclusionQuery")]
		public static extern void RenderPassEncoderBeginOcclusionQuery(RenderPassEncoder renderPassEncoder, uint32 queryIndex);

		[LinkName("wgpuRenderPassEncoderBeginPipelineStatisticsQuery")]
		public static extern void RenderPassEncoderBeginPipelineStatisticsQuery(RenderPassEncoder renderPassEncoder, QuerySet querySet, uint32 queryIndex);

		[LinkName("wgpuRenderPassEncoderDraw")]
		public static extern void RenderPassEncoderDraw(RenderPassEncoder renderPassEncoder, uint32 vertexCount, uint32 instanceCount, uint32 firstVertex, uint32 firstInstance);

		[LinkName("wgpuRenderPassEncoderDrawIndexed")]
		public static extern void RenderPassEncoderDrawIndexed(RenderPassEncoder renderPassEncoder, uint32 indexCount, uint32 instanceCount, uint32 firstIndex, int32 baseVertex, uint32 firstInstance);

		[LinkName("wgpuRenderPassEncoderDrawIndexedIndirect")]
		public static extern void RenderPassEncoderDrawIndexedIndirect(RenderPassEncoder renderPassEncoder, Buffer indirectBuffer, uint64 indirectOffset);

		[LinkName("wgpuRenderPassEncoderDrawIndirect")]
		public static extern void RenderPassEncoderDrawIndirect(RenderPassEncoder renderPassEncoder, Buffer indirectBuffer, uint64 indirectOffset);

		[LinkName("wgpuRenderPassEncoderEnd")]
		public static extern void RenderPassEncoderEnd(RenderPassEncoder renderPassEncoder);

		[LinkName("wgpuRenderPassEncoderEndOcclusionQuery")]
		public static extern void RenderPassEncoderEndOcclusionQuery(RenderPassEncoder renderPassEncoder);

		[LinkName("wgpuRenderPassEncoderEndPipelineStatisticsQuery")]
		public static extern void RenderPassEncoderEndPipelineStatisticsQuery(RenderPassEncoder renderPassEncoder);

		[LinkName("wgpuRenderPassEncoderExecuteBundles")]
		public static extern void RenderPassEncoderExecuteBundles(RenderPassEncoder renderPassEncoder, uint32 bundlesCount, RenderBundle* bundles);

		[LinkName("wgpuRenderPassEncoderInsertDebugMarker")]
		public static extern void RenderPassEncoderInsertDebugMarker(RenderPassEncoder renderPassEncoder, c_char* markerLabel);

		[LinkName("wgpuRenderPassEncoderPopDebugGroup")]
		public static extern void RenderPassEncoderPopDebugGroup(RenderPassEncoder renderPassEncoder);

		[LinkName("wgpuRenderPassEncoderPushDebugGroup")]
		public static extern void RenderPassEncoderPushDebugGroup(RenderPassEncoder renderPassEncoder, c_char* groupLabel);

		[LinkName("wgpuRenderPassEncoderSetBindGroup")]
		public static extern void RenderPassEncoderSetBindGroup(RenderPassEncoder renderPassEncoder, uint32 groupIndex, BindGroup group, uint32 dynamicOffsetCount, uint32* dynamicOffsets);

		[LinkName("wgpuRenderPassEncoderSetBlendConstant")]
		public static extern void RenderPassEncoderSetBlendConstant(RenderPassEncoder renderPassEncoder, Color* color);

		[LinkName("wgpuRenderPassEncoderSetIndexBuffer")]
		public static extern void RenderPassEncoderSetIndexBuffer(RenderPassEncoder renderPassEncoder, Buffer buffer, IndexFormat format, uint64 offset, uint64 size);

		[LinkName("wgpuRenderPassEncoderSetLabel")]
		public static extern void RenderPassEncoderSetLabel(RenderPassEncoder renderPassEncoder, c_char* label);

		[LinkName("wgpuRenderPassEncoderSetPipeline")]
		public static extern void RenderPassEncoderSetPipeline(RenderPassEncoder renderPassEncoder, RenderPipeline pipeline);

		[LinkName("wgpuRenderPassEncoderSetScissorRect")]
		public static extern void RenderPassEncoderSetScissorRect(RenderPassEncoder renderPassEncoder, uint32 x, uint32 y, uint32 width, uint32 height);

		[LinkName("wgpuRenderPassEncoderSetStencilReference")]
		public static extern void RenderPassEncoderSetStencilReference(RenderPassEncoder renderPassEncoder, uint32 reference);

		[LinkName("wgpuRenderPassEncoderSetVertexBuffer")]
		public static extern void RenderPassEncoderSetVertexBuffer(RenderPassEncoder renderPassEncoder, uint32 slot, Buffer buffer, uint64 offset, uint64 size);

		[LinkName("wgpuRenderPassEncoderSetViewport")]
		public static extern void RenderPassEncoderSetViewport(RenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth);

		[LinkName("wgpuRenderPipelineGetBindGroupLayout")]
		public static extern BindGroupLayout RenderPipelineGetBindGroupLayout(RenderPipeline renderPipeline, uint32 groupIndex);

		[LinkName("wgpuRenderPipelineSetLabel")]
		public static extern void RenderPipelineSetLabel(RenderPipeline renderPipeline, c_char* label);

		[LinkName("wgpuSamplerSetLabel")]
		public static extern void SamplerSetLabel(Sampler sampler, c_char* label);

		[LinkName("wgpuShaderModuleGetCompilationInfo")]
		public static extern void ShaderModuleGetCompilationInfo(ShaderModule shaderModule, CompilationInfoCallback callback, void* userdata);

		[LinkName("wgpuShaderModuleSetLabel")]
		public static extern void ShaderModuleSetLabel(ShaderModule shaderModule, c_char* label);

		[LinkName("wgpuSurfaceGetPreferredFormat")]
		public static extern TextureFormat SurfaceGetPreferredFormat(Surface surface, Adapter adapter);

		[LinkName("wgpuSwapChainGetCurrentTextureView")]
		public static extern TextureView SwapChainGetCurrentTextureView(SwapChain swapChain);

		[LinkName("wgpuSwapChainPresent")]
		public static extern void SwapChainPresent(SwapChain swapChain);

		[LinkName("wgpuTextureCreateView")]
		public static extern TextureView TextureCreateView(Texture texture, TextureViewDescriptor* descriptor);

		[LinkName("wgpuTextureDestroy")]
		public static extern void TextureDestroy(Texture texture);

		[LinkName("wgpuTextureSetLabel")]
		public static extern void TextureSetLabel(Texture texture, c_char* label);

		[LinkName("wgpuTextureViewSetLabel")]
		public static extern void TextureViewSetLabel(TextureView textureView, c_char* label);

		[LinkName("wgpuGenerateReport")]
		public static extern void GenerateReport(GlobalReport* report);

		[LinkName("wgpuQueueSubmitForIndex")]
		public static extern SubmissionIndex QueueSubmitForIndex(Queue queue, uint32 commandCount, CommandBuffer* commands);

		[LinkName("wgpuDevicePoll")]
		public static extern c_bool DevicePoll(Device device, c_bool wait, WrappedSubmissionIndex* wrappedSubmissionIndex);

		[LinkName("wgpuSetLogCallback")]
		public static extern void SetLogCallback(LogCallback callback);

		[LinkName("wgpuSetLogLevel")]
		public static extern void SetLogLevel(LogLevel level);

		[LinkName("wgpuGetVersion")]
		public static extern uint32 GetVersion();

		[LinkName("wgpuSurfaceGetSupportedFormats")]
		public static extern TextureFormat* SurfaceGetSupportedFormats(Surface surface, Adapter adapter, c_size* count);

		[LinkName("wgpuSurfaceGetSupportedPresentModes")]
		public static extern PresentMode* SurfaceGetSupportedPresentModes(Surface surface, Adapter adapter, c_size* count);

		[LinkName("wgpuRenderPassEncoderSetPushConstants")]
		public static extern void RenderPassEncoderSetPushConstants(RenderPassEncoder encoder, ShaderStage stages, uint32 offset, uint32 sizeBytes, void* data);

		[LinkName("wgpuRenderPassEncoderMultiDrawIndirect")]
		public static extern void RenderPassEncoderMultiDrawIndirect(RenderPassEncoder encoder, Buffer buffer, uint64 offset, uint32 count);

		[LinkName("wgpuRenderPassEncoderMultiDrawIndexedIndirect")]
		public static extern void RenderPassEncoderMultiDrawIndexedIndirect(RenderPassEncoder encoder, Buffer buffer, uint64 offset, uint32 count);

		[LinkName("wgpuRenderPassEncoderMultiDrawIndirectCount")]
		public static extern void RenderPassEncoderMultiDrawIndirectCount(RenderPassEncoder encoder, Buffer buffer, uint64 offset, Buffer count_buffer, uint64 count_buffer_offset, uint32 max_count);

		[LinkName("wgpuRenderPassEncoderMultiDrawIndexedIndirectCount")]
		public static extern void RenderPassEncoderMultiDrawIndexedIndirectCount(RenderPassEncoder encoder, Buffer buffer, uint64 offset, Buffer count_buffer, uint64 count_buffer_offset, uint32 max_count);

		[LinkName("wgpuAdapterDrop")]
		public static extern void AdapterDrop(Adapter adapter);

		[LinkName("wgpuBindGroupDrop")]
		public static extern void BindGroupDrop(BindGroup bindGroup);

		[LinkName("wgpuBindGroupLayoutDrop")]
		public static extern void BindGroupLayoutDrop(BindGroupLayout bindGroupLayout);

		[LinkName("wgpuBufferDrop")]
		public static extern void BufferDrop(Buffer buffer);

		[LinkName("wgpuCommandBufferDrop")]
		public static extern void CommandBufferDrop(CommandBuffer commandBuffer);

		[LinkName("wgpuCommandEncoderDrop")]
		public static extern void CommandEncoderDrop(CommandEncoder commandEncoder);

		[LinkName("wgpuComputePipelineDrop")]
		public static extern void ComputePipelineDrop(ComputePipeline computePipeline);

		[LinkName("wgpuDeviceDrop")]
		public static extern void DeviceDrop(Device device);

		[LinkName("wgpuPipelineLayoutDrop")]
		public static extern void PipelineLayoutDrop(PipelineLayout pipelineLayout);

		[LinkName("wgpuQuerySetDrop")]
		public static extern void QuerySetDrop(QuerySet querySet);

		[LinkName("wgpuRenderBundleDrop")]
		public static extern void RenderBundleDrop(RenderBundle renderBundle);

		[LinkName("wgpuRenderPipelineDrop")]
		public static extern void RenderPipelineDrop(RenderPipeline renderPipeline);

		[LinkName("wgpuSamplerDrop")]
		public static extern void SamplerDrop(Sampler sampler);

		[LinkName("wgpuShaderModuleDrop")]
		public static extern void ShaderModuleDrop(ShaderModule shaderModule);

		[LinkName("wgpuSurfaceDrop")]
		public static extern void SurfaceDrop(Surface surface);

		[LinkName("wgpuTextureDrop")]
		public static extern void TextureDrop(Texture texture);

		[LinkName("wgpuTextureViewDrop")]
		public static extern void TextureViewDrop(TextureView textureView);

		[LinkName("wgpuFree")]
		public static extern void Free(void* ptr, c_size size, c_size align);
	}
}
